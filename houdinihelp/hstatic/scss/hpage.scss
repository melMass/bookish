@import '_common.scss';

/*
Houdini-specific styling rules
 */

#googlebox {
    padding-top: 0.25em;
}


/* Actions */

.action.item {
    margin: 1em 0;

    & > .label {
        font-weight: bold;

        & > .keys {
            margin-left: 1em;
        }
    }
}


/* Usages and arguments */

.instants pre {
    color: inherit;
    background-color: rgba(0, 0, 0, 0.15);
}

.instant-usages .usage {
    margin-top: 0; margin-bottom: 0;
}
.instant-usages .usage {
    & > .label {
        margin-top: 0;
        margin-bottom: 0;
        padding-top: 0;
        padding-bottom: 0;
    }
    & > .content {
        margin-top: 0;
        margin-bottom: 0;
        padding-top: 0;
        padding-bottom: 0;
    }
}

.usagegroup {
    margin: 1em 0;
}
.usage {
    margin-top: 0;
    margin-bottom: 0;

    & > .label {
        margin: 0;
        padding: 0.5em 0.5em 0.25em 2.25em;
        text-indent: -2em;
        background-color: rgba(0, 0, 0, 0.05);
    }

    & > .content {
        margin: 1em 0 1em 2em;
    }

    &.empty {
        margin-bottom: 0;
    }
    &.empty > .label {
        margin-bottom: 0;
    }

    &.empty + li {
        margin-top: 0;
    }
}

.arglist {
}

.arg > .label {
    font-weight: 600;
    margin-bottom: 0;

    .version {
        padding: 0.1em 1em;
        background-color: $tag-bg;
        font-size: 0.857em;
        border-radius: 0.5em;
    }
}
.arg.returns > .label {
    font-family: inherit;
    font-weight: 700;
    color: #ff9f23;
}
.arg.variadic > .label {
}

.arg .content {
    margin-left: 2em;
}

.argdefault {
}

.vexerror {
    display: block;
    font-size: 70%;
    color: #f30;
}

.vexsignature {
    position: relative;
    color: #888;
}
.vexrtype {
}
.vexname {
    color: black;
}
.vextype {
    color: #8d31ae;
    font-weight: 400;
}

.vexout {
    color: #fc0;
}
.vexargtype {
    position: relative;
}
.vexargtype > .vextype, .vexargtype > .vexpattern {
    position: absolute;
    bottom: 1.1em;
    font-size: 70%;
}

.vexpattern {
    color: #869aae;
    font-weight: 500;
}
.vexarrayindic {
    color: black;
    font-weight: 500;
}

.vexstring {
    color: #c39c79;
}
.vexvector, .vexvector2, .vexvector4 {
    color: #8d31ae;
}
.vexmatrix, .vexmatrix2, .vexmatrix3, .vexmatrix4 {
    color: #60bc8f;
}
.vexint {
    color: #91a835;
}
.vexfloat {
    color: #06C;
}
.vexvoid {
    color: #ccc;
}
.vexbsdf {
    color: #f90;
}

.globaltype {
    text-align: right;
}
.globalmode {
    opacity: 0.5;
    font-size: 80%;
    white-space: nowrap;
}

.suite-item {
    clear: left;
    margin: 1em 0;
}
.suite-label {
    margin-top: 0;
    float: left;
    width: 16em;
    overflow-wrap: break-word;
}
.suite-content {
    margin-left: 16em;
    padding-left: 1em;
}


/* Render properties */

.properties_item {
    & > .label {
        font-weight: bold;
        margin-bottom: 0;
    }
    & > .content {
        margin-left: 2em;
    }
}

/* Nodes */

.node_hidden h1.title, .node_deprecated h1.title {
    text-decoration: line-through;
}

div.page-warning {
    background-color: #ffc;
    border: 2px solid #cc9;
    padding: 0 1em;
    margin: 1em 0;
}
p.node-deprecation-version {
    font-size: 0.875em;
}

/* Houdini node examples */

.example {
    margin-top: 2em;
    clear: left;
}

.example-buttons {
    float: left;
    width: 12em;
}

.example > .label {
    font-weight: bold;
    margin-left: 12em;
    margin-bottom: 0;
}
.example > .content {
    margin-left: 12em;
}

#toc {
    .example-buttons {
        float: none;
    }
    .example > .label {
        margin-left: 0;
    }
    .example > .content {
        margin-left: 0;
    }
}

.example > .content > .summary {
    margin-top: 0;
}

.egfor {
    display: block;
    font-weight: normal;
    margin: 0;
    font-size: 0.857em;
}


/* HOM enum values */

#enums-body h2.heading {
    font-size: 1.25rem;
    font-weight: 700;
    margin-bottom: 1rem;
}

.values_item {
    margin: 1em 0;

    & > .label {
        margin: 0;

        .prefix {
            font-size: 0.7em;
            opacity: 0.5;
        }
    }
    & > .content {
        margin-bottom: 0;
    }
}

.settings {
    margin: 1em 0;

    & > .setting {
        margin: 0.5em 0;
    }

    & > .setting > .label {
        width: $left-rail-width;
        font-weight: 600;
        margin-left: 1.25rem;

        &::before {
            display: block;
            position: absolute;
            margin-left: -1.25rem;
            font-family: "FontAwesome";
            font-weight: normal;
            font-size: 1rem;
            content: "\f1de";
        }
    }
    & > .setting > .content {
        margin-left: 1.25rem;

        code {
            overflow-wrap: break-word;
        }
    }
}

/* Shelves */

.shelftab {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));

    /* This is better for small screens, once min() is better supported */
    /* grid-template-columns: repeat(auto-fill, minmax(min(200px, 100%), 1fr)); */
    grid-gap: 1rem;
    /* This is the standardized property now, but has slightly less support */
    gap: 1rem;
}

.shelftool {
    margin: 0;
    position: relative;
    background-color: #f0f0f0;
    border-radius: 0.5em;
    padding: 0.5em 1em;

    .shelficon {
        position: absolute;
        top: 0.5em;
        left: 0.5em;
        width: 2.5em;
        height: 2.5em;
    }
    .text {
        font-weight: bold;
    }
    .text, .summary {
        margin: 0 0 0 2.5em;
    }
}
