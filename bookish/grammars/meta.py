import re
from bookish.parser import rules
from bookish.parser.rules import Empty, Failure, Miss

# This file was GENERATED from a grammar file. Do not edit this file; edit the
# grammar file and regenerate.


def hspace(stream, i, context):
    # <Regex hspace>
    match1 = _regex1.match(stream, i)
    if match1:
        out = match1.group(0)
        i = match1.end()
        context.update(match1.groupdict())
    else:
        out = Miss
    return out, i


def hspaces(stream, i, context):
    # <Star hspaces>
    savei1 = i
    times1 = 0
    output1 = []
    while i <= len(stream):
        previ1 = i
        out, i = hspace(stream, i, context)
        if out is Miss:
            break
        if i <= previ1:
            if stream.startswith('\x03', i) or i == len(stream):
                break
            raise Exception
        if out is not Empty:
            output1.append(out)
        times1 += 1
    if times1 >= 0:
        out = output1
    else:
        out = Miss
        i = savei1
    return out, i


def vspace(stream, i, context):
    # <Regex vspace>
    match1 = _regex2.match(stream, i)
    if match1:
        out = match1.group(0)
        i = match1.end()
        context.update(match1.groupdict())
    else:
        out = Miss
    return out, i


def emptyline(stream, i, context):
    # <Seq emptyline>
    savei1 = i
    active1 = True
    if active1:
        out, i = hspaces(stream, i, context)
        active1 = out is not Miss
    if active1:
        out, i = vspace(stream, i, context)
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def emptylines(stream, i, context):
    # <Star emptylines>
    savei1 = i
    times1 = 0
    output1 = []
    while i <= len(stream):
        previ1 = i
        out, i = emptyline(stream, i, context)
        if out is Miss:
            break
        if i <= previ1:
            if stream.startswith('\x03', i) or i == len(stream):
                break
            raise Exception
        if out is not Empty:
            output1.append(out)
        times1 += 1
    if times1 >= 0:
        out = output1
    else:
        out = Miss
        i = savei1
    return out, i


def identifier(stream, i, context):
    # <Regex identifier>
    match1 = _regex4.match(stream, i)
    if match1:
        out = match1.group(0)
        i = match1.end()
        context.update(match1.groupdict())
    else:
        out = Miss
    return out, i


def dottedname(stream, i, context):
    # <Take dottedname>
    savei1 = i
    # <Seq>
    savei2 = i
    active1 = True
    if active1:
        out, i = identifier(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Star>
        savei3 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Seq>
            savei4 = i
            active2 = True
            if active2 and i < len(stream) and stream[i] not in '.':
                active2 = False
                out = Miss
            if active2:
                # <String '.'>
                if stream.startswith('.', i):
                    out = '.'
                    i += 1
                else:
                    out = Miss
                active2 = out is not Miss
            if active2:
                out, i = identifier(stream, i, context)
                active2 = out is not Miss
            if not active2:
                i = savei4
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 0:
            out = output1
        else:
            out = Miss
            i = savei3
        active1 = out is not Miss
    if not active1:
        i = savei2
    if out is not Miss:
        out = stream[savei1:i]
    return out, i


def import_(stream, i, context):
    # <Seq import_>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        out, i = emptylines(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Not>
        # <Peek>
        savei2 = i
        # <Regex '[ \t]+'>
        match1 = _regex3.match(stream, i)
        if match1:
            out = match1.group(0)
            i = match1.end()
            context.update(match1.groupdict())
        else:
            out = Miss
        if out is not Miss:
            out = Empty
        i = savei2
        if out is Miss:
            out = Empty
        else:
            out = Miss
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in 'i':
        active1 = False
        out = Miss
    if active1:
        # <String 'import '>
        if stream.startswith('import ', i):
            out = 'import '
            i += 7
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'qid'>
        out, i = dottedname(stream, i, context)
        if out is not Miss:
            context['qid'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ' ':
        active1 = False
        out = Miss
    if active1:
        # <String ' as '>
        if stream.startswith(' as ', i):
            out = ' as '
            i += 4
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'n'>
        out, i = identifier(stream, i, context)
        if out is not Miss:
            context['n'] = out
        active1 = out is not Miss
    if active1:
        # <Do (n, qid)>
        out = eval(_do1, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def streamend(stream, i, context):
    # <StreamEnd streamend>
    if stream.startswith('\x03', i) or i >= len(stream):
        out = Empty
    else:
        out = Miss
    return out, i


def anon_value1(stream, i, context):
    # <Value anon_value1>
    out = ()
    return out, i


def anon_seq1(stream, i, context):
    # <Seq anon_seq1>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '(':
        active1 = False
        out = Miss
    if active1:
        # <String '('>
        if stream.startswith('(', i):
            out = '('
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'args'>
        # <ApplicationArgs>
        out, i = rules.take_app_args(stream, i)
        if out is not Miss:
            context['args'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ')':
        active1 = False
        out = Miss
    if active1:
        # <String ')'>
        if stream.startswith(')', i):
            out = ')'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Get>
        out = context.get('args', None)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def arguments(stream, i, context):
    # <Or arguments>
    targets = arguments_fm1[None]
    if i < len(stream):
        targets = arguments_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def call2(stream, i, context):
    # <Seq call2>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'mod'>
        out, i = identifier(stream, i, context)
        if out is not Miss:
            context['mod'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '.':
        active1 = False
        out = Miss
    if active1:
        # <String '.'>
        if stream.startswith('.', i):
            out = '.'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'name'>
        out, i = identifier(stream, i, context)
        if out is not Miss:
            context['name'] = out
        active1 = out is not Miss
    if active1:
        # <Bind 'args'>
        out, i = arguments(stream, i, context)
        if out is not Miss:
            context['args'] = out
        active1 = out is not Miss
    if active1:
        # <Do rules.Call2(mod, name, args)>
        out = eval(_do2, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def call(stream, i, context):
    # <Seq call>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'name'>
        out, i = identifier(stream, i, context)
        if out is not Miss:
            context['name'] = out
        active1 = out is not Miss
    if active1:
        # <Bind 'args'>
        out, i = arguments(stream, i, context)
        if out is not Miss:
            context['args'] = out
        active1 = out is not Miss
    if active1:
        # <Do rules.Call(name, args)>
        out = eval(_do3, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def wall_(stream, i, context):
    # <Seq wall_>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '!':
        active1 = False
        out = Miss
    if active1:
        # <String '!!'>
        if stream.startswith('!!', i):
            out = '!!'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'n'>
        out, i = identifier(stream, i, context)
        if out is not Miss:
            context['n'] = out
        active1 = out is not Miss
    if active1:
        # <Do rules.Wall(n)>
        out = eval(_do4, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def action2(stream, i, context):
    # <Seq action2>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '!':
        active1 = False
        out = Miss
    if active1:
        # <String '!!('>
        if stream.startswith('!!(', i):
            out = '!!('
            i += 3
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'code'>
        # <PythonExpr>
        out, i = rules.take_python_expr(stream, i, ')')
        if out is not Miss:
            context['code'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ')':
        active1 = False
        out = Miss
    if active1:
        # <String ')'>
        if stream.startswith(')', i):
            out = ')'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do rules.DoCode(code)>
        out = eval(_do5, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def action1(stream, i, context):
    # <Seq action1>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '!':
        active1 = False
        out = Miss
    if active1:
        # <String '!('>
        if stream.startswith('!(', i):
            out = '!('
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'code'>
        # <PythonExpr>
        out, i = rules.take_python_expr(stream, i, ')')
        if out is not Miss:
            context['code'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ')':
        active1 = False
        out = Miss
    if active1:
        # <String ')'>
        if stream.startswith(')', i):
            out = ')'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do rules.Do(code)>
        out = eval(_do6, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def any_(stream, i, context):
    # <Any any_>
    if stream[i] == '\x03' or i >= len(stream):
        out = Miss
    else:
        out = stream[i]
        i += 1
    return out, i


def bs(stream, i, context):
    # <Seq bs>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in 'b':
        active1 = False
        out = Miss
    if active1:
        # <String 'b'>
        if stream.startswith('b', i):
            out = 'b'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Value>
        out = '\x08'
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def ff(stream, i, context):
    # <Seq ff>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in 'f':
        active1 = False
        out = Miss
    if active1:
        # <String 'f'>
        if stream.startswith('f', i):
            out = 'f'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Value>
        out = '\x0c'
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def lf(stream, i, context):
    # <Seq lf>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in 'n':
        active1 = False
        out = Miss
    if active1:
        # <String 'n'>
        if stream.startswith('n', i):
            out = 'n'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Value>
        out = '\n'
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def cr(stream, i, context):
    # <Seq cr>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in 'r':
        active1 = False
        out = Miss
    if active1:
        # <String 'r'>
        if stream.startswith('r', i):
            out = 'r'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Value>
        out = '\r'
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def tab(stream, i, context):
    # <Seq tab>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in 't':
        active1 = False
        out = Miss
    if active1:
        # <String 't'>
        if stream.startswith('t', i):
            out = 't'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Value>
        out = '\t'
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def hexdigit(stream, i, context):
    # <Among hexdigit>
    if i < len(stream) and stream[i] in _charset1:
        out = stream[i]
        i += 1
    else:
        out = Miss
    return out, i


def hx(stream, i, context):
    # <Seq hx>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in 'x':
        active1 = False
        out = Miss
    if active1:
        # <String 'x'>
        if stream.startswith('x', i):
            out = 'x'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '0123456789ABCDEFabcdef':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'x'>
        # <Take>
        savei2 = i
        # <Repeat>
        savei3 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            out, i = hexdigit(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
            if times1 == 4: break
        if times1 >= 2:
            out = output1
        else:
            out = Miss
            i = savei3
        if out is not Miss:
            out = stream[savei2:i]
        if out is not Miss:
            context['x'] = out
        active1 = out is not Miss
    if active1:
        # <Do chr(int(x, 16))>
        out = eval(_do7, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def escchar(stream, i, context):
    # <Seq escchar>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '\\':
        active1 = False
        out = Miss
    if active1:
        # <String '\\'>
        if stream.startswith('\\', i):
            out = '\\'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Or>
        targets = None_fm1[None]
        if i < len(stream):
            targets = None_fm1.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def dqstring(stream, i, context):
    # <Seq dqstring>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '"':
        active1 = False
        out = Miss
    if active1:
        # <String '"'>
        if stream.startswith('"', i):
            out = '"'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 's'>
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            if i == len(stream) or stream[i] in '"':
                savei2 = i
                # <String '"'>
                if stream.startswith('"', i):
                    out = '"'
                    i += 1
                else:
                    out = Miss
                i = savei2
                if out is Failure:
                    out = Miss
                    break
                elif out is not Miss:
                    break
            if i == len(stream) or stream[i] in '\\':
                savei2 = i
                out, i = escchar(stream, i, context)
                if out is Miss:
                    i = savei2 + 1
                elif out is Failure:
                    out = Miss
                    break
                elif i <= savei2:
                    raise Exception
                else:
                    if savei2 > lasti:
                        output1.append(stream[lasti:savei2])
                    output1.append(out)
                    lasti = i
            else:
                i += 1
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            context['s'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '"':
        active1 = False
        out = Miss
    if active1:
        # <String '"'>
        if stream.startswith('"', i):
            out = '"'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do ''.join(s)>
        out = eval(_do8, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def sqstring(stream, i, context):
    # <Seq sqstring>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in "'":
        active1 = False
        out = Miss
    if active1:
        # <String "'">
        if stream.startswith("'", i):
            out = "'"
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 's'>
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            if i == len(stream) or stream[i] in "'":
                savei2 = i
                # <String "'">
                if stream.startswith("'", i):
                    out = "'"
                    i += 1
                else:
                    out = Miss
                i = savei2
                if out is Failure:
                    out = Miss
                    break
                elif out is not Miss:
                    break
            if i == len(stream) or stream[i] in '\\':
                savei2 = i
                out, i = escchar(stream, i, context)
                if out is Miss:
                    i = savei2 + 1
                elif out is Failure:
                    out = Miss
                    break
                elif i <= savei2:
                    raise Exception
                else:
                    if savei2 > lasti:
                        output1.append(stream[lasti:savei2])
                    output1.append(out)
                    lasti = i
            else:
                i += 1
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            context['s'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in "'":
        active1 = False
        out = Miss
    if active1:
        # <String "'">
        if stream.startswith("'", i):
            out = "'"
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do ''.join(s)>
        out = eval(_do8, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def string(stream, i, context):
    # <Seq string>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '\'"':
        active1 = False
        out = Miss
    if active1:
        # <Bind 's'>
        # <Or>
        targets = None_fm2[None]
        if i < len(stream):
            targets = None_fm2.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        if out is not Miss:
            context['s'] = out
        active1 = out is not Miss
    if active1:
        # <Do rules.String(s)>
        out = eval(_do9, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def comment(stream, i, context):
    # <Regex comment>
    match1 = _regex7.match(stream, i)
    if match1:
        out = match1.group(0)
        i = match1.end()
        context.update(match1.groupdict())
    else:
        out = Miss
    return out, i


def ws(stream, i, context):
    # <Star ws>
    savei1 = i
    times1 = 0
    output1 = []
    while i <= len(stream):
        previ1 = i
        # <Or>
        targets = None_fm3[None]
        if i < len(stream):
            targets = None_fm3.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        if out is Miss:
            break
        if i <= previ1:
            if stream.startswith('\x03', i) or i == len(stream):
                break
            raise Exception
        if out is not Empty:
            output1.append(out)
        times1 += 1
    if times1 >= 0:
        out = output1
    else:
        out = Miss
        i = savei1
    return out, i


def brackets(stream, i, context):
    # <Seq brackets>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '(':
        active1 = False
        out = Miss
    if active1:
        # <String '('>
        if stream.startswith('(', i):
            out = '('
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Bind 'inside'>
        out, i = expr(stream, i, context)
        if out is not Miss:
            context['inside'] = out
        active1 = out is not Miss
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ')':
        active1 = False
        out = Miss
    if active1:
        # <String ')'>
        if stream.startswith(')', i):
            out = ')'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Get>
        out = context.get('inside', None)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def value(stream, i, context):
    # <Seq value>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '-':
        active1 = False
        out = Miss
    if active1:
        # <String '->'>
        if stream.startswith('->', i):
            out = '->'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Bind 'v'>
        # <PythonExpr>
        out, i = rules.take_python_expr(stream, i, '\r\n)]')
        if out is not Miss:
            context['v'] = out
        active1 = out is not Miss
    if active1:
        # <Do rules.Do(v)>
        out = eval(_do10, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def regex(stream, i, context):
    # <Seq regex>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '/':
        active1 = False
        out = Miss
    if active1:
        # <String '/'>
        if stream.startswith('/', i):
            out = '/'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'chars'>
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            if i == len(stream) or stream[i] in '/':
                savei2 = i
                # <String '/'>
                if stream.startswith('/', i):
                    out = '/'
                    i += 1
                else:
                    out = Miss
                i = savei2
                if out is Failure:
                    out = Miss
                    break
                elif out is not Miss:
                    break
            i += 1
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            context['chars'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '/':
        active1 = False
        out = Miss
    if active1:
        # <String '/'>
        if stream.startswith('/', i):
            out = '/'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do rules.Regex(''.join(chars))>
        out = eval(_do11, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def take(stream, i, context):
    # <Seq take>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '<':
        active1 = False
        out = Miss
    if active1:
        # <String '<'>
        if stream.startswith('<', i):
            out = '<'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'trule'>
        out, i = expr(stream, i, context)
        if out is not Miss:
            context['trule'] = out
        active1 = out is not Miss
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '>':
        active1 = False
        out = Miss
    if active1:
        # <String '>'>
        if stream.startswith('>', i):
            out = '>'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do rules.Take(trule)>
        out = eval(_do12, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def firsts(stream, i, context):
    # <Seq firsts>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '>':
        active1 = False
        out = Miss
    if active1:
        # <String '>['>
        if stream.startswith('>[', i):
            out = '>['
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'chars'>
        # <Take>
        savei2 = i
        # <Plus>
        savei3 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Seq>
            savei4 = i
            savectx2 = context
            context = context.push()
            active2 = True
            if active2:
                # <Not>
                # <Peek>
                savei5 = i
                # <String ']'>
                if stream.startswith(']', i):
                    out = ']'
                    i += 1
                else:
                    out = Miss
                if out is not Miss:
                    out = Empty
                i = savei5
                if out is Miss:
                    out = Empty
                else:
                    out = Miss
                active2 = out is not Miss
            if active2:
                # <Or>
                targets = None_fm4[None]
                if i < len(stream):
                    targets = None_fm4.get(stream[i], targets)
                if targets:
                    for rule in targets:
                        out, new = rule(stream, i, context)
                        if out is not Miss:
                            i = new
                            break
                    else:
                        out = Miss
                else:
                    out = Miss
                active2 = out is not Miss
            context = savectx2
            if not active2:
                i = savei4
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 1:
            out = output1
        else:
            out = Miss
            i = savei3
        if out is not Miss:
            out = stream[savei2:i]
        if out is not Miss:
            context['chars'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ']':
        active1 = False
        out = Miss
    if active1:
        # <String ']'>
        if stream.startswith(']', i):
            out = ']'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do rules.FirstChars(chars)>
        out = eval(_do13, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def predicate2(stream, i, context):
    # <Seq predicate2>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '?':
        active1 = False
        out = Miss
    if active1:
        # <String '??('>
        if stream.startswith('??(', i):
            out = '??('
            i += 3
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'code'>
        # <PythonExpr>
        out, i = rules.take_python_expr(stream, i, ')')
        if out is not Miss:
            context['code'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ')':
        active1 = False
        out = Miss
    if active1:
        # <String ')'>
        if stream.startswith(')', i):
            out = ')'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do rules.IfCode(code)>
        out = eval(_do14, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def predicate1(stream, i, context):
    # <Seq predicate1>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '?':
        active1 = False
        out = Miss
    if active1:
        # <String '?('>
        if stream.startswith('?(', i):
            out = '?('
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'code'>
        # <PythonExpr>
        out, i = rules.take_python_expr(stream, i, ')')
        if out is not Miss:
            context['code'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ')':
        active1 = False
        out = Miss
    if active1:
        # <String ')'>
        if stream.startswith(')', i):
            out = ')'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do rules.If(code)>
        out = eval(_do15, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_seq2(stream, i, context):
    # <Seq anon_seq2>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ',':
        active1 = False
        out = Miss
    if active1:
        # <String ','>
        if stream.startswith(',', i):
            out = ','
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1:
        out, i = expr1(stream, i, context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_value2(stream, i, context):
    # <Value anon_value2>
    out = None
    return out, i


def mixed(stream, i, context):
    # <Seq mixed>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '@':
        active1 = False
        out = Miss
    if active1:
        # <String '@('>
        if stream.startswith('@(', i):
            out = '@('
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'until'>
        out, i = expr1(stream, i, context)
        if out is not Miss:
            context['until'] = out
        active1 = out is not Miss
    if active1:
        # <Bind 'target'>
        # <Or>
        targets = None_fm5[None]
        if i < len(stream):
            targets = None_fm5.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        if out is not Miss:
            context['target'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ')':
        active1 = False
        out = Miss
    if active1:
        # <String ')'>
        if stream.startswith(')', i):
            out = ')'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do rules.Mixed(until, target)>
        out = eval(_do16, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def among(stream, i, context):
    # <Seq among>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '[':
        active1 = False
        out = Miss
    if active1:
        # <String '['>
        if stream.startswith('[', i):
            out = '['
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'items'>
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            if i == len(stream) or stream[i] in ']':
                savei2 = i
                # <String ']'>
                if stream.startswith(']', i):
                    out = ']'
                    i += 1
                else:
                    out = Miss
                i = savei2
                if out is Failure:
                    out = Miss
                    break
                elif out is not Miss:
                    break
            if i == len(stream) or stream[i] in '\\':
                savei2 = i
                out, i = escchar(stream, i, context)
                if out is Miss:
                    i = savei2 + 1
                elif out is Failure:
                    out = Miss
                    break
                elif i <= savei2:
                    raise Exception
                else:
                    if savei2 > lasti:
                        output1.append(stream[lasti:savei2])
                    output1.append(out)
                    lasti = i
            else:
                i += 1
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            context['items'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ']':
        active1 = False
        out = Miss
    if active1:
        # <String ']'>
        if stream.startswith(']', i):
            out = ']'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do rules.Among(''.join(items))>
        out = eval(_do17, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def extent(stream, i, context):
    # <Seq extent>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in 'x':
        active1 = False
        out = Miss
    if active1:
        # <String 'x('>
        if stream.startswith('x(', i):
            out = 'x('
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Bind 'erule'>
        out, i = expr(stream, i, context)
        if out is not Miss:
            context['erule'] = out
        active1 = out is not Miss
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ')':
        active1 = False
        out = Miss
    if active1:
        # <String ')'>
        if stream.startswith(')', i):
            out = ')'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do rules.Extent(erule)>
        out = eval(_do18, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def atom(stream, i, context):
    # <Or atom>
    targets = atom_fm1[None]
    if i < len(stream):
        targets = atom_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def anon_seq3(stream, i, context):
    # <Seq anon_seq3>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '^':
        active1 = False
        out = Miss
    if active1:
        # <String '^'>
        if stream.startswith('^', i):
            out = '^'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'a'>
        out, i = atom(stream, i, context)
        if out is not Miss:
            context['a'] = out
        active1 = out is not Miss
    if active1:
        # <Do rules.LookBehind(a)>
        out = eval(_do19, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def expr1(stream, i, context):
    # <Or expr1>
    targets = expr1_fm1[None]
    if i < len(stream):
        targets = expr1_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def fail(stream, i, context):
    # <Seq fail>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '.':
        active1 = False
        out = Miss
    if active1:
        # <String '.('>
        if stream.startswith('.(', i):
            out = '.('
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'frule'>
        out, i = expr1(stream, i, context)
        if out is not Miss:
            context['frule'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ')':
        active1 = False
        out = Miss
    if active1:
        # <String ')'>
        if stream.startswith(')', i):
            out = ')'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do rules.FailIf(frule)>
        out = eval(_do20, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_seq4(stream, i, context):
    # <Seq anon_seq4>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '~':
        active1 = False
        out = Miss
    if active1:
        # <String '~~~'>
        if stream.startswith('~~~', i):
            out = '~~~'
            i += 3
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'e1'>
        out, i = expr1(stream, i, context)
        if out is not Miss:
            context['e1'] = out
        active1 = out is not Miss
    if active1:
        # <Do rules.Not(rules.Peek(e1))>
        out = eval(_do21, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_seq5(stream, i, context):
    # <Seq anon_seq5>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '~':
        active1 = False
        out = Miss
    if active1:
        # <String '~~'>
        if stream.startswith('~~', i):
            out = '~~'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'e1'>
        out, i = expr1(stream, i, context)
        if out is not Miss:
            context['e1'] = out
        active1 = out is not Miss
    if active1:
        # <Do rules.Peek(e1)>
        out = eval(_do22, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_seq6(stream, i, context):
    # <Seq anon_seq6>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '~':
        active1 = False
        out = Miss
    if active1:
        # <String '~'>
        if stream.startswith('~', i):
            out = '~'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'e1'>
        out, i = expr1(stream, i, context)
        if out is not Miss:
            context['e1'] = out
        active1 = out is not Miss
    if active1:
        # <Do rules.Not(e1)>
        out = eval(_do23, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def tildable(stream, i, context):
    # <Or tildable>
    targets = tildable_fm1[None]
    if i < len(stream):
        targets = tildable_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def anon_get1(stream, i, context):
    # <Get anon_get1>
    out = context.get('e2', None)
    return out, i


def anon_seq7(stream, i, context):
    # <Seq anon_seq7>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '*':
        active1 = False
        out = Miss
    if active1:
        # <String '*'>
        if stream.startswith('*', i):
            out = '*'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do rules.Star(e2)>
        out = eval(_do24, globals(), context)
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def anon_seq8(stream, i, context):
    # <Seq anon_seq8>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '+':
        active1 = False
        out = Miss
    if active1:
        # <String '+'>
        if stream.startswith('+', i):
            out = '+'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do rules.Plus(e2)>
        out = eval(_do25, globals(), context)
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def anon_seq9(stream, i, context):
    # <Seq anon_seq9>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '?':
        active1 = False
        out = Miss
    if active1:
        # <String '?'>
        if stream.startswith('?', i):
            out = '?'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do rules.Opt(e2)>
        out = eval(_do26, globals(), context)
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def digit(stream, i, context):
    # <Among digit>
    if i < len(stream) and stream[i] in _charset2:
        out = stream[i]
        i += 1
    else:
        out = Miss
    return out, i


def decnum(stream, i, context):
    # <Seq decnum>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '0123456789':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'ds'>
        # <Take>
        savei2 = i
        # <Plus>
        savei3 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            out, i = digit(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 1:
            out = output1
        else:
            out = Miss
            i = savei3
        if out is not Miss:
            out = stream[savei2:i]
        if out is not Miss:
            context['ds'] = out
        active1 = out is not Miss
    if active1:
        # <Do int(ds)>
        out = eval(_do27, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def hexnum(stream, i, context):
    # <Seq hexnum>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '0':
        active1 = False
        out = Miss
    if active1:
        # <String '0x'>
        if stream.startswith('0x', i):
            out = '0x'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '0123456789ABCDEFabcdef':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'xs'>
        # <Take>
        savei2 = i
        # <Plus>
        savei3 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            out, i = hexdigit(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 1:
            out = output1
        else:
            out = Miss
            i = savei3
        if out is not Miss:
            out = stream[savei2:i]
        if out is not Miss:
            context['xs'] = out
        active1 = out is not Miss
    if active1:
        # <Do int(x, 16)>
        out = eval(_do28, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def barenum(stream, i, context):
    # <Or barenum>
    targets = barenum_fm1[None]
    if i < len(stream):
        targets = barenum_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def anon_value3(stream, i, context):
    # <Value anon_value3>
    out = None
    return out, i


def anon_seq11(stream, i, context):
    # <Seq anon_seq11>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Regex ' *, *'>
        match1 = _regex8.match(stream, i)
        if match1:
            out = match1.group(0)
            i = match1.end()
            context.update(match1.groupdict())
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Or>
        targets = None_fm6[None]
        if i < len(stream):
            targets = None_fm6.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_get2(stream, i, context):
    # <Get anon_get2>
    out = context.get('mn', None)
    return out, i


def repeattimes(stream, i, context):
    # <Seq repeattimes>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '{':
        active1 = False
        out = Miss
    if active1:
        # <String '{'>
        if stream.startswith('{', i):
            out = '{'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '0761824953':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'mn'>
        out, i = barenum(stream, i, context)
        if out is not Miss:
            context['mn'] = out
        active1 = out is not Miss
    if active1:
        # <Bind 'mx'>
        # <Or>
        targets = None_fm7[None]
        if i < len(stream):
            targets = None_fm7.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        if out is not Miss:
            context['mx'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '}':
        active1 = False
        out = Miss
    if active1:
        # <String '}'>
        if stream.startswith('}', i):
            out = '}'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do (mn, mx)>
        out = eval(_do29, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_seq10(stream, i, context):
    # <Seq anon_seq10>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '{':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'ts'>
        out, i = repeattimes(stream, i, context)
        if out is not Miss:
            context['ts'] = out
        active1 = out is not Miss
    if active1:
        # <Do rules.Repeat(e2, *ts)>
        out = eval(_do30, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def postfixes(stream, i, context):
    # <Or postfixes>
    targets = postfixes_fm1[None]
    if i < len(stream):
        targets = postfixes_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def repeatable(stream, i, context):
    # <Seq repeatable>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'e2'>
        out, i = tildable(stream, i, context)
        if out is not Miss:
            context['e2'] = out
        active1 = out is not Miss
    if active1:
        out, i = postfixes(stream, i, context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_get3(stream, i, context):
    # <Get anon_get3>
    out = context.get('e3a', None)
    return out, i


def anon_seq12(stream, i, context):
    # <Seq anon_seq12>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in ':':
        active1 = False
        out = Miss
    if active1:
        # <String ':'>
        if stream.startswith(':', i):
            out = ':'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'n'>
        out, i = identifier(stream, i, context)
        if out is not Miss:
            context['n'] = out
        active1 = out is not Miss
    if active1:
        # <Do rules.Bind(n, e3a)>
        out = eval(_do31, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def bindable(stream, i, context):
    # <Seq bindable>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'e3a'>
        out, i = repeatable(stream, i, context)
        if out is not Miss:
            context['e3a'] = out
        active1 = out is not Miss
    if active1:
        # <Or>
        targets = None_fm8[None]
        if i < len(stream):
            targets = None_fm8.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_seq13(stream, i, context):
    # <Seq anon_seq13>
    savei1 = i
    active1 = True
    if active1:
        # <Opt>
        out, i = hspace(stream, i, context)
        if out is Miss:
            out = []
        else:
            out = [out]
        active1 = out is not Miss
    if active1:
        # <Star>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            out, i = emptyline(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 0:
            out = output1
        else:
            out = Miss
            i = savei2
        active1 = out is not Miss
    if active1:
        # <Regex '[ \t]+'>
        match1 = _regex9.match(stream, i)
        if match1:
            out = match1.group(0)
            i = match1.end()
            context.update(match1.groupdict())
        else:
            out = Miss
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def seqable(stream, i, context):
    # <Seq seqable>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'e3'>
        out, i = bindable(stream, i, context)
        if out is not Miss:
            context['e3'] = out
        active1 = out is not Miss
    if active1:
        # <Bind 'e3s'>
        # <Star>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Seq>
            savei3 = i
            savectx2 = context
            context = context.push()
            active2 = True
            if active2:
                # <Or>
                targets = None_fm9[None]
                if i < len(stream):
                    targets = None_fm9.get(stream[i], targets)
                if targets:
                    for rule in targets:
                        out, new = rule(stream, i, context)
                        if out is not Miss:
                            i = new
                            break
                    else:
                        out = Miss
                else:
                    out = Miss
                active2 = out is not Miss
            if active2:
                # <Bind 'e3a'>
                out, i = repeatable(stream, i, context)
                if out is not Miss:
                    context['e3a'] = out
                active2 = out is not Miss
            if active2:
                # <Or>
                targets = None_fm8[None]
                if i < len(stream):
                    targets = None_fm8.get(stream[i], targets)
                if targets:
                    for rule in targets:
                        out, new = rule(stream, i, context)
                        if out is not Miss:
                            i = new
                            break
                    else:
                        out = Miss
                else:
                    out = Miss
                active2 = out is not Miss
            context = savectx2
            if not active2:
                i = savei3
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 0:
            out = output1
        else:
            out = Miss
            i = savei2
        if out is not Miss:
            context['e3s'] = out
        active1 = out is not Miss
    if active1:
        # <Do rules.Seq(e3, *e3s) if e3s else e3>
        out = eval(_do32, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def expr(stream, i, context):
    # <Seq expr>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'e4'>
        out, i = seqable(stream, i, context)
        if out is not Miss:
            context['e4'] = out
        active1 = out is not Miss
    if active1:
        # <Bind 'e4s'>
        # <Star>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Seq>
            savei3 = i
            savectx2 = context
            context = context.push()
            active2 = True
            if active2:
                out, i = ws(stream, i, context)
                active2 = out is not Miss
            if active2 and i < len(stream) and stream[i] not in '|':
                active2 = False
                out = Miss
            if active2:
                # <String '|'>
                if stream.startswith('|', i):
                    out = '|'
                    i += 1
                else:
                    out = Miss
                active2 = out is not Miss
            if active2:
                out, i = ws(stream, i, context)
                active2 = out is not Miss
            if active2:
                # <Bind 'e3'>
                out, i = bindable(stream, i, context)
                if out is not Miss:
                    context['e3'] = out
                active2 = out is not Miss
            if active2:
                # <Bind 'e3s'>
                # <Star>
                savei4 = i
                times2 = 0
                output2 = []
                while i <= len(stream):
                    previ2 = i
                    # <Seq>
                    savei5 = i
                    savectx3 = context
                    context = context.push()
                    active3 = True
                    if active3:
                        # <Or>
                        targets = None_fm9[None]
                        if i < len(stream):
                            targets = None_fm9.get(stream[i], targets)
                        if targets:
                            for rule in targets:
                                out, new = rule(stream, i, context)
                                if out is not Miss:
                                    i = new
                                    break
                            else:
                                out = Miss
                        else:
                            out = Miss
                        active3 = out is not Miss
                    if active3:
                        # <Bind 'e3a'>
                        out, i = repeatable(stream, i, context)
                        if out is not Miss:
                            context['e3a'] = out
                        active3 = out is not Miss
                    if active3:
                        # <Or>
                        targets = None_fm8[None]
                        if i < len(stream):
                            targets = None_fm8.get(stream[i], targets)
                        if targets:
                            for rule in targets:
                                out, new = rule(stream, i, context)
                                if out is not Miss:
                                    i = new
                                    break
                            else:
                                out = Miss
                        else:
                            out = Miss
                        active3 = out is not Miss
                    context = savectx3
                    if not active3:
                        i = savei5
                    if out is Miss:
                        break
                    if i <= previ2:
                        if stream.startswith('\x03', i) or i == len(stream):
                            break
                        raise Exception
                    if out is not Empty:
                        output2.append(out)
                    times2 += 1
                if times2 >= 0:
                    out = output2
                else:
                    out = Miss
                    i = savei4
                if out is not Miss:
                    context['e3s'] = out
                active2 = out is not Miss
            if active2:
                # <Do rules.Seq(e3, *e3s) if e3s else e3>
                out = eval(_do32, globals(), context)
                active2 = out is not Miss
            context = savectx2
            if not active2:
                i = savei3
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 0:
            out = output1
        else:
            out = Miss
            i = savei2
        if out is not Miss:
            context['e4s'] = out
        active1 = out is not Miss
    if active1:
        # <Do rules.Or(e4, *e4s) if e4s else e4>
        out = eval(_do33, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def vspaces(stream, i, context):
    # <Star vspaces>
    savei1 = i
    times1 = 0
    output1 = []
    while i <= len(stream):
        previ1 = i
        out, i = vspace(stream, i, context)
        if out is Miss:
            break
        if i <= previ1:
            if stream.startswith('\x03', i) or i == len(stream):
                break
            raise Exception
        if out is not Empty:
            output1.append(out)
        times1 += 1
    if times1 >= 0:
        out = output1
    else:
        out = Miss
        i = savei1
    return out, i


def assignment(stream, i, context):
    # <Seq assignment>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Not>
        out, i = streamend(stream, i, context)
        if out is Miss:
            out = Empty
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        out, i = emptylines(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Not>
        # <Peek>
        savei2 = i
        # <Regex '[ \t]+'>
        match1 = _regex5.match(stream, i)
        if match1:
            out = match1.group(0)
            i = match1.end()
            context.update(match1.groupdict())
        else:
            out = Miss
        if out is not Miss:
            out = Empty
        i = savei2
        if out is Miss:
            out = Empty
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'n'>
        out, i = identifier(stream, i, context)
        if out is not Miss:
            context['n'] = out
        active1 = out is not Miss
    if active1:
        # <Bind 'args'>
        out, i = arguments(stream, i, context)
        if out is not Miss:
            context['args'] = out
        active1 = out is not Miss
    if active1:
        # <Regex ' *= *'>
        match2 = _regex6.match(stream, i)
        if match2:
            out = match2.group(0)
            i = match2.end()
            context.update(match2.groupdict())
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'e'>
        out, i = expr(stream, i, context)
        if out is not Miss:
            context['e'] = out
        active1 = out is not Miss
    if active1:
        out, i = hspaces(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Or>
        targets = None_fm10[None]
        if i < len(stream):
            targets = None_fm10.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do (n, rules.Params(e, args) if args else e)>
        out = eval(_do34, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def grammar(stream, i, context):
    # <Seq grammar>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'imps'>
        # <Star>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            out, i = import_(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 0:
            out = output1
        else:
            out = Miss
            i = savei2
        if out is not Miss:
            context['imps'] = out
        active1 = out is not Miss
    if active1:
        # <Bind 'rs'>
        # <Plus>
        savei3 = i
        times2 = 0
        output2 = []
        while i <= len(stream):
            previ2 = i
            out, i = assignment(stream, i, context)
            if out is Miss:
                break
            if i <= previ2:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output2.append(out)
            times2 += 1
        if times2 >= 1:
            out = output2
        else:
            out = Miss
            i = savei3
        if out is not Miss:
            context['rs'] = out
        active1 = out is not Miss
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '\x03':
        active1 = False
        out = Miss
    if active1:
        out, i = streamend(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Do (dict(imps), dict(rs))>
        out = eval(_do35, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


_regex1 = re.compile('[ \t]|#[^\n]*')
_regex2 = re.compile('\r\n|[\r\n]')
_regex3 = re.compile('[ \t]+')
_regex4 = re.compile('[A-Za-z_][A-Za-z_0-9]*')
_do1 = rules.compile_expr('(n, qid)')
_regex5 = re.compile('[ \t]+')
arguments_fm1 = {
    None: (anon_value1,),
    '(': (anon_seq1, anon_value1,),
}
_regex6 = re.compile(' *= *')
_do2 = rules.compile_expr('rules.Call2(mod, name, args)')
_do3 = rules.compile_expr('rules.Call(name, args)')
_do4 = rules.compile_expr('rules.Wall(n)')
_do5 = rules.compile_expr('rules.DoCode(code)')
_do6 = rules.compile_expr('rules.Do(code)')
_charset1 = '0123456789ABCDEFabcdef'
_do7 = rules.compile_expr('chr(int(x, 16))')
None_fm1 = {
    None: (any_,),
    'b': (bs, any_,),
    'f': (ff, any_,),
    'n': (lf, any_,),
    'r': (cr, any_,),
    't': (tab, any_,),
    'x': (hx, any_,),
}
_do8 = rules.compile_expr("''.join(s)")
None_fm2 = {
    None: (),
    '"': (dqstring,),
    "'": (sqstring,),
}
_do9 = rules.compile_expr('rules.String(s)')
_regex7 = re.compile('#[^\n]*')
None_fm3 = {
    None: (hspace, vspace, comment,),
}
_do10 = rules.compile_expr('rules.Do(v)')
_do11 = rules.compile_expr("rules.Regex(''.join(chars))")
_do12 = rules.compile_expr('rules.Take(trule)')
None_fm4 = {
    None: (any_,),
    '\\': (escchar, any_,),
}
_do13 = rules.compile_expr('rules.FirstChars(chars)')
_do14 = rules.compile_expr('rules.IfCode(code)')
_do15 = rules.compile_expr('rules.If(code)')
None_fm5 = {
    None: (anon_seq2, anon_value2,),
}
_do16 = rules.compile_expr('rules.Mixed(until, target)')
_do17 = rules.compile_expr("rules.Among(''.join(items))")
_do18 = rules.compile_expr('rules.Extent(erule)')
atom_fm1 = {
    None: (call2, call,),
    '!': (wall_, action2, action1, call2, call,),
    '"': (string, call2, call,),
    "'": (string, call2, call,),
    '(': (brackets, call2, call,),
    '-': (value, call2, call,),
    '.': (fail, call2, call,),
    '/': (regex, call2, call,),
    '<': (take, call2, call,),
    '>': (firsts, call2, call,),
    '?': (predicate2, predicate1, call2, call,),
    '@': (mixed, call2, call,),
    '[': (among, call2, call,),
    'x': (extent, call2, call,),
}
_do19 = rules.compile_expr('rules.LookBehind(a)')
expr1_fm1 = {
    None: (call2, call,),
    '!': (wall_, action2, action1, call2, call,),
    '"': (string, call2, call,),
    "'": (string, call2, call,),
    '(': (brackets, call2, call,),
    '-': (value, call2, call,),
    '.': (fail, call2, call,),
    '/': (regex, call2, call,),
    '<': (take, call2, call,),
    '>': (firsts, call2, call,),
    '?': (predicate2, predicate1, call2, call,),
    '@': (mixed, call2, call,),
    '[': (among, call2, call,),
    '^': (anon_seq3, call2, call,),
    'x': (extent, call2, call,),
}
_do20 = rules.compile_expr('rules.FailIf(frule)')
_do21 = rules.compile_expr('rules.Not(rules.Peek(e1))')
_do22 = rules.compile_expr('rules.Peek(e1)')
_do23 = rules.compile_expr('rules.Not(e1)')
tildable_fm1 = {
    None: (call2, call,),
    '!': (wall_, action2, action1, call2, call,),
    '"': (string, call2, call,),
    "'": (string, call2, call,),
    '(': (brackets, call2, call,),
    '-': (value, call2, call,),
    '.': (fail, call2, call,),
    '/': (regex, call2, call,),
    '<': (take, call2, call,),
    '>': (firsts, call2, call,),
    '?': (predicate2, predicate1, call2, call,),
    '@': (mixed, call2, call,),
    '[': (among, call2, call,),
    '^': (anon_seq3, call2, call,),
    'x': (extent, call2, call,),
    '~': (anon_seq4, anon_seq5, anon_seq6, call2, call,),
}
_do24 = rules.compile_expr('rules.Star(e2)')
_do25 = rules.compile_expr('rules.Plus(e2)')
_do26 = rules.compile_expr('rules.Opt(e2)')
_charset2 = '0123456789'
_do27 = rules.compile_expr('int(ds)')
_do28 = rules.compile_expr('int(x, 16)')
barenum_fm1 = {
    None: (),
    '0': (decnum, hexnum,),
    '1': (decnum,),
    '2': (decnum,),
    '3': (decnum,),
    '4': (decnum,),
    '5': (decnum,),
    '6': (decnum,),
    '7': (decnum,),
    '8': (decnum,),
    '9': (decnum,),
}
_regex8 = re.compile(' *, *')
None_fm6 = {
    None: (anon_value3,),
    '0': (decnum, hexnum, anon_value3,),
    '1': (decnum, anon_value3,),
    '2': (decnum, anon_value3,),
    '3': (decnum, anon_value3,),
    '4': (decnum, anon_value3,),
    '5': (decnum, anon_value3,),
    '6': (decnum, anon_value3,),
    '7': (decnum, anon_value3,),
    '8': (decnum, anon_value3,),
    '9': (decnum, anon_value3,),
}
None_fm7 = {
    None: (anon_seq11, anon_get2,),
}
_do29 = rules.compile_expr('(mn, mx)')
_do30 = rules.compile_expr('rules.Repeat(e2, *ts)')
postfixes_fm1 = {
    None: (anon_get1,),
    '*': (anon_seq7, anon_get1,),
    '+': (anon_seq8, anon_get1,),
    '?': (anon_seq9, anon_get1,),
    '{': (anon_seq10, anon_get1,),
}
_do31 = rules.compile_expr('rules.Bind(n, e3a)')
None_fm8 = {
    None: (anon_get3,),
    ':': (anon_seq12, anon_get3,),
}
_regex9 = re.compile('[ \t]+')
None_fm9 = {
    None: (hspace, anon_seq13,),
}
_do32 = rules.compile_expr('rules.Seq(e3, *e3s) if e3s else e3')
_do33 = rules.compile_expr('rules.Or(e4, *e4s) if e4s else e4')
None_fm10 = {
    None: (vspaces,),
    '\x03': (vspaces, streamend,),
}
_do34 = rules.compile_expr('(n, rules.Params(e, args) if args else e)')
_do35 = rules.compile_expr('(dict(imps), dict(rs))')

