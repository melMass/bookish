import re
from bookish.parser import rules
from bookish.parser.rules import Empty, Failure, Miss
import bookish.parser.rules as r
import bookish.avenue.patterns as pt

# This file was GENERATED from a grammar file. Do not edit this file; edit the
# grammar file and regenerate.


def anon_string1(stream, i, context):
    # <String anon_string1>
    if stream.startswith('\t', i):
        out = '\t'
        i += 1
    else:
        out = Miss
    return out, i


def anon_string2(stream, i, context):
    # <String anon_string2>
    if stream.startswith(u' ', i):
        out = u' '
        i += 1
    else:
        out = Miss
    return out, i


def ws(stream, i, context):
    # <Star ws>
    savei1 = i
    times1 = 0
    output1 = []
    while i <= len(stream):
        previ1 = i
        # <Or>
        targets = None_fm1[None]
        if i < len(stream):
            targets = None_fm1.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        if out is Miss:
            break
        if i <= previ1:
            if stream.startswith('\x03', i) or i == len(stream):
                break
            raise Exception
        if out is not Empty:
            output1.append(out)
        times1 += 1
    if times1 >= 0:
        out = output1
    else:
        out = Miss
        i = savei1
    return out, i


def root(stream, i, context):
    # <Seq root>
    savei1 = i
    active1 = True
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in u'$':
        active1 = False
        out = Miss
    if active1:
        # <String u'$'>
        if stream.startswith(u'$', i):
            out = u'$'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do Root()>
        out = eval(_do1, globals(), context)
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def barenum(stream, i, context):
    # <Seq barenum>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind u'ds'>
        # <Regex u'[0-9]+'>
        match1 = _regex1.match(stream, i)
        if match1:
            out = match1.group(0)
            i = match1.end()
            context.update(match1.groupdict())
        else:
            out = Miss
        if out is not Miss:
            context[u'ds'] = out
        active1 = out is not Miss
    if active1:
        # <Do int(ds)>
        out = eval(_do2, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_seq2(stream, i, context):
    # <Seq anon_seq2>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind u'x'>
        out, i = barenum(stream, i, context)
        if out is not Miss:
            context[u'x'] = out
        active1 = out is not Miss
    if active1:
        # <Do x>
        out = eval(_do3, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_seq3(stream, i, context):
    # <Seq anon_seq3>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in u'-':
        active1 = False
        out = Miss
    if active1:
        # <String u'-'>
        if stream.startswith(u'-', i):
            out = u'-'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind u'x'>
        out, i = barenum(stream, i, context)
        if out is not Miss:
            context[u'x'] = out
        active1 = out is not Miss
    if active1:
        # <Do -x>
        out = eval(_do4, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def number(stream, i, context):
    # <Seq number>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Or>
        targets = None_fm2[None]
        if i < len(stream):
            targets = None_fm2.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def index(stream, i, context):
    # <Seq index>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind u'i'>
        out, i = number(stream, i, context)
        if out is not Miss:
            context[u'i'] = out
        active1 = out is not Miss
    if active1:
        # <Bind u'j'>
        # <Opt>
        # <Seq>
        savei2 = i
        savectx2 = context
        context = context.push()
        active2 = True
        if active2:
            # <Call ws()>
            out, i = ws(stream, i, context)
            active2 = out is not Miss
        if active2 and i < len(stream) and stream[i] not in u':':
            active2 = False
            out = Miss
        if active2:
            # <String u':'>
            if stream.startswith(u':', i):
                out = u':'
                i += 1
            else:
                out = Miss
            active2 = out is not Miss
        if active2:
            # <Call ws()>
            out, i = ws(stream, i, context)
            active2 = out is not Miss
        if active2:
            # <Call number()>
            out, i = number(stream, i, context)
            active2 = out is not Miss
        context = savectx2
        if not active2:
            i = savei2
        if out is Miss:
            out = []
        else:
            out = [out]
        if out is not Miss:
            context[u'j'] = out
        active1 = out is not Miss
    if active1:
        # <Do pt.Slice(i, j[0] if j else None)>
        out = eval(_do5, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def name(stream, i, context):
    # <Regex name>
    match1 = _regex2.match(stream, i)
    if match1:
        out = match1.group(0)
        i = match1.end()
        context.update(match1.groupdict())
    else:
        out = Miss
    return out, i


def anon_seq4(stream, i, context):
    # <Seq anon_seq4>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind u'e'>
        out, i = expr(stream, i, context)
        if out is not Miss:
            context[u'e'] = out
        active1 = out is not Miss
    if active1:
        # <Bind u'es'>
        # <Star>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Seq>
            savei3 = i
            savectx2 = context
            context = context.push()
            active2 = True
            if active2:
                # <Call ws()>
                out, i = ws(stream, i, context)
                active2 = out is not Miss
            if active2 and i < len(stream) and stream[i] not in u',':
                active2 = False
                out = Miss
            if active2:
                # <String u','>
                if stream.startswith(u',', i):
                    out = u','
                    i += 1
                else:
                    out = Miss
                active2 = out is not Miss
            if active2:
                # <Call expr()>
                out, i = expr(stream, i, context)
                active2 = out is not Miss
            context = savectx2
            if not active2:
                i = savei3
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 0:
            out = output1
        else:
            out = Miss
            i = savei2
        if out is not Miss:
            context[u'es'] = out
        active1 = out is not Miss
    if active1:
        # <Do [e] + es>
        out = eval(_do6, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_do1(stream, i, context):
    # <Do anon_do1>
    out = []
    return out, i


def args(stream, i, context):
    # <Or args>
    targets = args_fm1[None]
    if i < len(stream):
        targets = args_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def application(stream, i, context):
    # <Seq application>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind u'n'>
        out, i = name(stream, i, context)
        if out is not Miss:
            context[u'n'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in u'(':
        active1 = False
        out = Miss
    if active1:
        # <String u'('>
        if stream.startswith(u'(', i):
            out = u'('
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind u'args'>
        out, i = args(stream, i, context)
        if out is not Miss:
            context[u'args'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in u')':
        active1 = False
        out = Miss
    if active1:
        # <String u')'>
        if stream.startswith(u')', i):
            out = u')'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do pt.App(n, args)>
        out = eval(_do7, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_seq5(stream, i, context):
    # <Seq anon_seq5>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in u'"':
        active1 = False
        out = Miss
    if active1:
        # <String u'"'>
        if stream.startswith(u'"', i):
            out = u'"'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind u's'>
        # <Take>
        savei2 = i
        # <Plus>
        savei3 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Seq>
            savei4 = i
            active2 = True
            if active2:
                # <Not>
                # <String u'"'>
                if stream.startswith(u'"', i):
                    out = u'"'
                    i += 1
                else:
                    out = Miss
                if out is Miss:
                    out = Empty
                else:
                    out = Miss
                active2 = out is not Miss
            if active2:
                # <Call2 r.any_()>
                out, i = r.any_(stream, i, context)
                active2 = out is not Miss
            if not active2:
                i = savei4
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 1:
            out = output1
        else:
            out = Miss
            i = savei3
        if out is not Miss:
            out = stream[savei2:i]
        if out is not Miss:
            context[u's'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in u'"':
        active1 = False
        out = Miss
    if active1:
        # <String u'"'>
        if stream.startswith(u'"', i):
            out = u'"'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do s>
        out = eval(_do8, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_seq6(stream, i, context):
    # <Seq anon_seq6>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in u"'":
        active1 = False
        out = Miss
    if active1:
        # <String u"'">
        if stream.startswith(u"'", i):
            out = u"'"
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind u's'>
        # <Take>
        savei2 = i
        # <Plus>
        savei3 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Seq>
            savei4 = i
            active2 = True
            if active2:
                # <Not>
                # <String u"'">
                if stream.startswith(u"'", i):
                    out = u"'"
                    i += 1
                else:
                    out = Miss
                if out is Miss:
                    out = Empty
                else:
                    out = Miss
                active2 = out is not Miss
            if active2:
                # <Call2 r.any_()>
                out, i = r.any_(stream, i, context)
                active2 = out is not Miss
            if not active2:
                i = savei4
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 1:
            out = output1
        else:
            out = Miss
            i = savei3
        if out is not Miss:
            out = stream[savei2:i]
        if out is not Miss:
            context[u's'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in u"'":
        active1 = False
        out = Miss
    if active1:
        # <String u"'">
        if stream.startswith(u"'", i):
            out = u"'"
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do s>
        out = eval(_do8, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def string(stream, i, context):
    # <Or string>
    targets = string_fm1[None]
    if i < len(stream):
        targets = string_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def lookup(stream, i, context):
    # <Seq lookup>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Bind u's'>
        # <Or>
        targets = None_fm3[None]
        if i < len(stream):
            targets = None_fm3.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        if out is not Miss:
            context[u's'] = out
        active1 = out is not Miss
    if active1:
        # <Do pt.Lookup(s)>
        out = eval(_do9, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def regex(stream, i, context):
    # <Seq regex>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in u'/':
        active1 = False
        out = Miss
    if active1:
        # <String u'/'>
        if stream.startswith(u'/', i):
            out = u'/'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind u'r'>
        # <Take>
        savei2 = i
        # <Plus>
        savei3 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Seq>
            savei4 = i
            active2 = True
            if active2:
                # <Not>
                # <String u'/'>
                if stream.startswith(u'/', i):
                    out = u'/'
                    i += 1
                else:
                    out = Miss
                if out is Miss:
                    out = Empty
                else:
                    out = Miss
                active2 = out is not Miss
            if active2:
                # <Call2 r.any_()>
                out, i = r.any_(stream, i, context)
                active2 = out is not Miss
            if not active2:
                i = savei4
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 1:
            out = output1
        else:
            out = Miss
            i = savei3
        if out is not Miss:
            out = stream[savei2:i]
        if out is not Miss:
            context[u'r'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in u'/':
        active1 = False
        out = Miss
    if active1:
        # <String u'/'>
        if stream.startswith(u'/', i):
            out = u'/'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do pt.Regex(r)>
        out = eval(_do10, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def star(stream, i, context):
    # <Seq star>
    savei1 = i
    active1 = True
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in u'*':
        active1 = False
        out = Miss
    if active1:
        # <String u'*'>
        if stream.startswith(u'*', i):
            out = u'*'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do Star()>
        out = eval(_do11, globals(), context)
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def anon_string3(stream, i, context):
    # <String anon_string3>
    if stream.startswith(u'!=', i):
        out = u'!='
        i += 2
    else:
        out = Miss
    return out, i


def anon_string4(stream, i, context):
    # <String anon_string4>
    if stream.startswith(u'<=', i):
        out = u'<='
        i += 2
    else:
        out = Miss
    return out, i


def anon_string5(stream, i, context):
    # <String anon_string5>
    if stream.startswith(u'<', i):
        out = u'<'
        i += 1
    else:
        out = Miss
    return out, i


def anon_string6(stream, i, context):
    # <String anon_string6>
    if stream.startswith(u'==', i):
        out = u'=='
        i += 2
    else:
        out = Miss
    return out, i


def anon_string7(stream, i, context):
    # <String anon_string7>
    if stream.startswith(u'=', i):
        out = u'='
        i += 1
    else:
        out = Miss
    return out, i


def anon_string8(stream, i, context):
    # <String anon_string8>
    if stream.startswith(u'=~', i):
        out = u'=~'
        i += 2
    else:
        out = Miss
    return out, i


def anon_string9(stream, i, context):
    # <String anon_string9>
    if stream.startswith(u'>=', i):
        out = u'>='
        i += 2
    else:
        out = Miss
    return out, i


def anon_string10(stream, i, context):
    # <String anon_string10>
    if stream.startswith(u'>', i):
        out = u'>'
        i += 1
    else:
        out = Miss
    return out, i


def literal(stream, i, context):
    # <Or literal>
    targets = literal_fm1[None]
    if i < len(stream):
        targets = literal_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def test(stream, i, context):
    # <Seq test>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in u'@':
        active1 = False
        out = Miss
    if active1:
        # <String u'@'>
        if stream.startswith(u'@', i):
            out = u'@'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind u'n'>
        out, i = name(stream, i, context)
        if out is not Miss:
            context[u'n'] = out
        active1 = out is not Miss
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in u'!=<>':
        active1 = False
        out = Miss
    if active1:
        # <Bind u'op'>
        # <Or>
        targets = None_fm4[None]
        if i < len(stream):
            targets = None_fm4.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        if out is not Miss:
            context[u'op'] = out
        active1 = out is not Miss
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Bind u'v'>
        out, i = literal(stream, i, context)
        if out is not Miss:
            context[u'v'] = out
        active1 = out is not Miss
    if active1:
        # <Do pt.Comparison(n, op, v)>
        out = eval(_do12, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def predicate(stream, i, context):
    # <Seq predicate>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in u'?':
        active1 = False
        out = Miss
    if active1:
        # <String u'?('>
        if stream.startswith(u'?(', i):
            out = u'?('
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind u'src'>
        # <PythonExpr>
        out, i = rules.take_python_expr(stream, i, ')')
        if out is not Miss:
            context[u'src'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in u')':
        active1 = False
        out = Miss
    if active1:
        # <String u')'>
        if stream.startswith(u')', i):
            out = u')'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do pt.Predicate(src)>
        out = eval(_do13, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def action(stream, i, context):
    # <Seq action>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in u'{':
        active1 = False
        out = Miss
    if active1:
        # <String u'{'>
        if stream.startswith(u'{', i):
            out = u'{'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind u'src'>
        # <PythonExpr>
        out, i = rules.take_python_expr(stream, i, ')')
        if out is not Miss:
            context[u'src'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in u'}':
        active1 = False
        out = Miss
    if active1:
        # <String u'}'>
        if stream.startswith(u'}', i):
            out = u'}'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do pt.Action(src)>
        out = eval(_do14, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def brackets(stream, i, context):
    # <Seq brackets>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in u'(':
        active1 = False
        out = Miss
    if active1:
        # <String u'('>
        if stream.startswith(u'(', i):
            out = u'('
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind u'e'>
        out, i = expr(stream, i, context)
        if out is not Miss:
            context[u'e'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in u')':
        active1 = False
        out = Miss
    if active1:
        # <String u')'>
        if stream.startswith(u')', i):
            out = u')'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do e>
        out = eval(_do15, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def filter(stream, i, context):
    # <Seq filter>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in u'[':
        active1 = False
        out = Miss
    if active1:
        # <String u'['>
        if stream.startswith(u'[', i):
            out = u'['
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind u'e'>
        out, i = expr(stream, i, context)
        if out is not Miss:
            context[u'e'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in u']':
        active1 = False
        out = Miss
    if active1:
        # <String u']'>
        if stream.startswith(u']', i):
            out = u']'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do pt.Filter(e)>
        out = eval(_do16, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def expr1(stream, i, context):
    # <Or expr1>
    targets = expr1_fm1[None]
    if i < len(stream):
        targets = expr1_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def anon_seq1(stream, i, context):
    # <Seq anon_seq1>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind u'e1'>
        out, i = expr1(stream, i, context)
        if out is not Miss:
            context[u'e1'] = out
        active1 = out is not Miss
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in u'.':
        active1 = False
        out = Miss
    if active1:
        # <String u'..'>
        if stream.startswith(u'..', i):
            out = u'..'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind u'e'>
        out, i = expr(stream, i, context)
        if out is not Miss:
            context[u'e'] = out
        active1 = out is not Miss
    if active1:
        # <Do pt.Ancestor(e1, e)>
        out = eval(_do17, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_seq7(stream, i, context):
    # <Seq anon_seq7>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind u'e1'>
        out, i = expr1(stream, i, context)
        if out is not Miss:
            context[u'e1'] = out
        active1 = out is not Miss
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in u'.':
        active1 = False
        out = Miss
    if active1:
        # <String u'.'>
        if stream.startswith(u'.', i):
            out = u'.'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind u'e'>
        out, i = expr(stream, i, context)
        if out is not Miss:
            context[u'e'] = out
        active1 = out is not Miss
    if active1:
        # <Do pt.Child(e1, e)>
        out = eval(_do18, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def expr2(stream, i, context):
    # <Or expr2>
    targets = expr2_fm1[None]
    if i < len(stream):
        targets = expr2_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def expr(stream, i, context):
    # <Seq expr>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind u'e2'>
        out, i = expr2(stream, i, context)
        if out is not Miss:
            context[u'e2'] = out
        active1 = out is not Miss
    if active1:
        # <Bind u'e2s'>
        # <Star>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Seq>
            savei3 = i
            savectx2 = context
            context = context.push()
            active2 = True
            if active2:
                # <Call ws()>
                out, i = ws(stream, i, context)
                active2 = out is not Miss
            if active2 and i < len(stream) and stream[i] not in u'|':
                active2 = False
                out = Miss
            if active2:
                # <String u'|'>
                if stream.startswith(u'|', i):
                    out = u'|'
                    i += 1
                else:
                    out = Miss
                active2 = out is not Miss
            if active2:
                # <Call expr2()>
                out, i = expr2(stream, i, context)
                active2 = out is not Miss
            context = savectx2
            if not active2:
                i = savei3
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 0:
            out = output1
        else:
            out = Miss
            i = savei2
        if out is not Miss:
            context[u'e2s'] = out
        active1 = out is not Miss
    if active1:
        # <Do pt.Union([e2] + e2s) if e2s else e2>
        out = eval(_do19, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def streamend(stream, i, context):
    # <StreamEnd streamend>
    if stream.startswith('\x03', i) or i >= len(stream):
        out = Empty
    else:
        out = Miss
    return out, i


def grammar(stream, i, context):
    # <Seq grammar>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind u'e'>
        out, i = expr(stream, i, context)
        if out is not Miss:
            context[u'e'] = out
        active1 = out is not Miss
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '\x03':
        active1 = False
        out = Miss
    if active1:
        out, i = streamend(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Do e>
        out = eval(_do15, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


None_fm1 = {
    None: (),
    '\t': (anon_string1,),
    u' ': (anon_string2,),
}
_do1 = rules.compile_expr(u'Root()')
_regex1 = re.compile(u'[0-9]+')
_do2 = rules.compile_expr(u'int(ds)')
_do3 = rules.compile_expr(u'x')
_do4 = rules.compile_expr(u'-x')
None_fm2 = {
    None: (anon_seq2,),
    u'-': (anon_seq3, anon_seq2,),
}
_do5 = rules.compile_expr(u'pt.Slice(i, j[0] if j else None)')
_regex2 = re.compile(u'[A-Za-z_]+[A-Za-z_0-9]*')
_do6 = rules.compile_expr(u'[e] + es')
args_fm1 = {
    None: (anon_seq4, anon_do1,),
}
_do7 = rules.compile_expr(u'pt.App(n, args)')
_do8 = rules.compile_expr(u's')
string_fm1 = {
    None: (),
    u'"': (anon_seq5,),
    u"'": (anon_seq6,),
}
None_fm3 = {
    None: (name,),
    u'"': (string, name,),
    u"'": (string, name,),
}
_do9 = rules.compile_expr(u'pt.Lookup(s)')
_do10 = rules.compile_expr(u'pt.Regex(r)')
_do11 = rules.compile_expr(u'Star()')
None_fm4 = {
    None: (),
    u'!': (anon_string3,),
    u'<': (anon_string4, anon_string5,),
    u'=': (anon_string6, anon_string7, anon_string8,),
    u'>': (anon_string9, anon_string10,),
}
literal_fm1 = {
    None: (number,),
    u'"': (string, number,),
    u"'": (string, number,),
}
_do12 = rules.compile_expr(u'pt.Comparison(n, op, v)')
_do13 = rules.compile_expr(u'pt.Predicate(src)')
_do14 = rules.compile_expr(u'pt.Action(src)')
_do15 = rules.compile_expr(u'e')
_do16 = rules.compile_expr(u'pt.Filter(e)')
expr1_fm1 = {
    None: (root, index, application, lookup, regex, star, test, predicate, action, brackets,),
    u'[': (root, index, application, lookup, regex, star, test, predicate, action, brackets, filter,),
}
_do17 = rules.compile_expr(u'pt.Ancestor(e1, e)')
_do18 = rules.compile_expr(u'pt.Child(e1, e)')
expr2_fm1 = {
    None: (anon_seq1, anon_seq7, expr1,),
}
_do19 = rules.compile_expr(u'pt.Union([e2] + e2s) if e2s else e2')

