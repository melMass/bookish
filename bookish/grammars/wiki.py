import re
from bookish.parser import rules
from bookish.parser.rules import Empty, Failure, Miss
import bookish.parser.bootstrap as bs
import bookish.parser.rules as r
import bookish.wiki.wikipages as w
import bookish.util as util

# This file was GENERATED from a grammar file. Do not edit this file; edit the
# grammar file and regenerate.


def hspaces(stream, i, context):
    # <Regex hspaces>
    match1 = _regex1.match(stream, i)
    if match1:
        out = match1.group(0)
        i = match1.end()
        context.update(match1.groupdict())
    else:
        out = Miss
    return out, i


def emptylines(stream, i, context):
    # <Plus emptylines>
    savei1 = i
    times1 = 0
    output1 = []
    while i <= len(stream):
        previ1 = i
        # <Seq>
        savei2 = i
        active1 = True
        if active1:
            # <Call2 r.linestart()>
            out, i = r.linestart(stream, i, context)
            active1 = out is not Miss
        if active1:
            # <Call hspaces()>
            out, i = hspaces(stream, i, context)
            active1 = out is not Miss
        if active1 and i < len(stream) and stream[i] not in '\n':
            active1 = False
            out = Miss
        if active1:
            # <String '\n'>
            if stream.startswith('\n', i):
                out = '\n'
                i += 1
            else:
                out = Miss
            active1 = out is not Miss
        if not active1:
            i = savei2
        if out is Miss:
            break
        if i <= previ1:
            if stream.startswith('\x03', i) or i == len(stream):
                break
            raise Exception
        if out is not Empty:
            output1.append(out)
        times1 += 1
    if times1 >= 1:
        out = output1
    else:
        out = Miss
        i = savei1
    return out, i


def linestart(stream, i, context):
    # <LineStart linestart>
    if i < len(stream) and (i == 0 or stream.startswith('\n', i - 1)):
        out = Empty
    else:
        out = Miss
    return out, i


def lstart(stream, i, context):
    # <Seq lstart>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Opt>
        # <Call emptylines()>
        out, i = emptylines(stream, i, context)
        if out is Miss:
            out = []
        else:
            out = [out]
        active1 = out is not Miss
    if active1:
        out, i = linestart(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Bind 'indent'>
        out, i = hspaces(stream, i, context)
        if out is not Miss:
            context['indent'] = out
        active1 = out is not Miss
    if active1:
        # <Do len(indent)>
        out = eval(_do1, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def hspace(stream, i, context):
    # <Regex hspace>
    match1 = _regex2.match(stream, i)
    if match1:
        out = match1.group(0)
        i = match1.end()
        context.update(match1.groupdict())
    else:
        out = Miss
    return out, i


def anon_among1(stream, i, context):
    # <Among anon_among1>
    if i < len(stream) and stream[i] in _charset1:
        out = stream[i]
        i += 1
    else:
        out = Miss
    return out, i


def anon_string1(stream, i, context):
    # <String anon_string1>
    if stream.startswith('\r\n', i):
        out = '\r\n'
        i += 2
    else:
        out = Miss
    return out, i


def vspace(stream, i, context):
    # <Or vspace>
    targets = vspace_fm1[None]
    if i < len(stream):
        targets = vspace_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def ws(stream, i, context):
    # <Star ws>
    savei1 = i
    times1 = 0
    output1 = []
    while i <= len(stream):
        previ1 = i
        # <Or>
        targets = None_fm1[None]
        if i < len(stream):
            targets = None_fm1.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        if out is Miss:
            break
        if i <= previ1:
            if stream.startswith('\x03', i) or i == len(stream):
                break
            raise Exception
        if out is not Empty:
            output1.append(out)
        times1 += 1
    if times1 >= 0:
        out = output1
    else:
        out = Miss
        i = savei1
    return out, i


def xchar(stream, i, context):
    # <Among xchar>
    if i < len(stream) and stream[i] in _charset2:
        out = stream[i]
        i += 1
    else:
        out = Miss
    return out, i


def identifier(stream, i, context):
    # <Seq identifier>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_0123456789':
        active1 = False
        out = Miss
    if active1:
        # <Peek>
        savei2 = i
        # <Call xchar()>
        out, i = xchar(stream, i, context)
        if out is not Miss:
            out = Empty
        i = savei2
        active1 = out is not Miss
    if active1:
        # <Take>
        savei3 = i
        # <Regex '[A-Za-z_0-9]+'>
        match1 = _regex3.match(stream, i)
        if match1:
            out = match1.group(0)
            i = match1.end()
            context.update(match1.groupdict())
        else:
            out = Miss
        if out is not Miss:
            out = stream[savei3:i]
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def anon_seq1(stream, i, context):
    # <Seq anon_seq1>
    savei1 = i
    active1 = True
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '#':
        active1 = False
        out = Miss
    if active1:
        # <String '#!'>
        if stream.startswith('#!', i):
            out = '#!'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in 'FDoMXTSId_KAUsbjr4OmavRY0Bz16PkZnpgNy2eG53HQCWhiqx78ltEJVw9ucLf':
        active1 = False
        out = Miss
    if active1:
        out, i = identifier(stream, i, context)
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def anon_do1(stream, i, context):
    # <Do anon_do1>
    out = eval(_do2, globals(), context)
    return out, i


def lineend(stream, i, context):
    # <LineEnd lineend>
    if stream.startswith('\x03', i) or i >= len(stream):
        out = Empty
    elif stream.startswith('\n', i):
        out = '\n'
        i += 1
    else:
        out = Miss
    return out, i


def streamend(stream, i, context):
    # <StreamEnd streamend>
    if stream.startswith('\x03', i) or i >= len(stream):
        out = Empty
    else:
        out = Miss
    return out, i


def codeblock(stream, i, context):
    # <Seq codeblock>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'indent'>
        out, i = lstart(stream, i, context)
        if out is not Miss:
            context['indent'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '{':
        active1 = False
        out = Miss
    if active1:
        # <String '{{{'>
        if stream.startswith('{{{', i):
            out = '{{{'
            i += 3
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'lang'>
        # <Or>
        targets = None_fm2[None]
        if i < len(stream):
            targets = None_fm2.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        if out is not Miss:
            context['lang'] = out
        active1 = out is not Miss
    if active1:
        # <Bind 'tx'>
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            if i == len(stream) or stream[i] in '}':
                savei2 = i
                # <String '}}}'>
                if stream.startswith('}}}', i):
                    out = '}}}'
                    i += 3
                else:
                    out = Miss
                i = savei2
                if out is Failure:
                    out = Miss
                    break
                elif out is not Miss:
                    break
            i += 1
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            context['tx'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '}':
        active1 = False
        out = Miss
    if active1:
        # <String '}}}'>
        if stream.startswith('}}}', i):
            out = '}}}'
            i += 3
        else:
            out = Miss
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '\x03\n':
        active1 = False
        out = Miss
    if active1:
        # <Or>
        targets = None_fm3[None]
        if i < len(stream):
            targets = None_fm3.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do w.block("pre", indent, tx, lang=lang)>
        out = eval(_do3, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def blockbreak(stream, i, context):
    # <BlockBreak blockbreak>
    out, i = rules.blockbreak(stream, i, context)
    return out, i


def ord_start(stream, i, context):
    # <Seq ord_start>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '#':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'ns'>
        # <Plus>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <String '#'>
            if stream.startswith('#', i):
                out = '#'
                i += 1
            else:
                out = Miss
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 1:
            out = output1
        else:
            out = Miss
            i = savei2
        if out is not Miss:
            context['ns'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ' ':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'space'>
        # <Plus>
        savei3 = i
        times2 = 0
        output2 = []
        while i <= len(stream):
            previ2 = i
            # <String ' '>
            if stream.startswith(' ', i):
                out = ' '
                i += 1
            else:
                out = Miss
            if out is Miss:
                break
            if i <= previ2:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output2.append(out)
            times2 += 1
        if times2 >= 1:
            out = output2
        else:
            out = Miss
            i = savei3
        if out is not Miss:
            context['space'] = out
        active1 = out is not Miss
    if active1:
        # <Do len(ns) + len(space)>
        out = eval(_do4, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def bullet_start(stream, i, context):
    # <Seq bullet_start>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '-*':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'bs'>
        # <Plus>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Among '-*'>
            if i < len(stream) and stream[i] in _charset3:
                out = stream[i]
                i += 1
            else:
                out = Miss
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 1:
            out = output1
        else:
            out = Miss
            i = savei2
        if out is not Miss:
            context['bs'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ' ':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'space'>
        # <Plus>
        savei3 = i
        times2 = 0
        output2 = []
        while i <= len(stream):
            previ2 = i
            # <String ' '>
            if stream.startswith(' ', i):
                out = ' '
                i += 1
            else:
                out = Miss
            if out is Miss:
                break
            if i <= previ2:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output2.append(out)
            times2 += 1
        if times2 >= 1:
            out = output2
        else:
            out = Miss
            i = savei3
        if out is not Miss:
            context['space'] = out
        active1 = out is not Miss
    if active1:
        # <Do len(bs) + len(space)>
        out = eval(_do5, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_string2(stream, i, context):
    # <String anon_string2>
    if stream.startswith('//', i):
        out = '//'
        i += 2
    else:
        out = Miss
    return out, i


def itemname(stream, i, context):
    # <Seq itemname>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'n'>
        # <Opt>
        # <Call identifier()>
        out, i = identifier(stream, i, context)
        if out is Miss:
            out = []
        else:
            out = [out]
        if out is not Miss:
            context['n'] = out
        active1 = out is not Miss
    if active1:
        # <Do n[0] if n else None>
        out = eval(_do6, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def any_(stream, i, context):
    # <Any any_>
    if stream[i] == '\x03' or i >= len(stream):
        out = Miss
    else:
        out = stream[i]
        i += 1
    return out, i


def bs(stream, i, context):
    # <Seq bs>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in 'b':
        active1 = False
        out = Miss
    if active1:
        # <String 'b'>
        if stream.startswith('b', i):
            out = 'b'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Value>
        out = '\x08'
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def ff(stream, i, context):
    # <Seq ff>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in 'f':
        active1 = False
        out = Miss
    if active1:
        # <String 'f'>
        if stream.startswith('f', i):
            out = 'f'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Value>
        out = '\x0c'
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def lf(stream, i, context):
    # <Seq lf>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in 'n':
        active1 = False
        out = Miss
    if active1:
        # <String 'n'>
        if stream.startswith('n', i):
            out = 'n'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Value>
        out = '\n'
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def cr(stream, i, context):
    # <Seq cr>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in 'r':
        active1 = False
        out = Miss
    if active1:
        # <String 'r'>
        if stream.startswith('r', i):
            out = 'r'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Value>
        out = '\r'
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def tab(stream, i, context):
    # <Seq tab>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in 't':
        active1 = False
        out = Miss
    if active1:
        # <String 't'>
        if stream.startswith('t', i):
            out = 't'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Value>
        out = '\t'
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def hexdigit(stream, i, context):
    # <Among hexdigit>
    if i < len(stream) and stream[i] in _charset4:
        out = stream[i]
        i += 1
    else:
        out = Miss
    return out, i


def hx(stream, i, context):
    # <Seq hx>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in 'x':
        active1 = False
        out = Miss
    if active1:
        # <String 'x'>
        if stream.startswith('x', i):
            out = 'x'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '0123456789ABCDEFabcdef':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'x'>
        # <Take>
        savei2 = i
        # <Repeat>
        savei3 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            out, i = hexdigit(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
            if times1 == 4: break
        if times1 >= 2:
            out = output1
        else:
            out = Miss
            i = savei3
        if out is not Miss:
            out = stream[savei2:i]
        if out is not Miss:
            context['x'] = out
        active1 = out is not Miss
    if active1:
        # <Do chr(int(x, 16))>
        out = eval(_do7, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def escchar(stream, i, context):
    # <Seq escchar>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '\\':
        active1 = False
        out = Miss
    if active1:
        # <String '\\'>
        if stream.startswith('\\', i):
            out = '\\'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Or>
        targets = None_fm4[None]
        if i < len(stream):
            targets = None_fm4.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_mixed1(stream, i, context):
    # <Mixed anon_mixed1>
    output1 = []
    lasti = i
    while i < len(stream):
        if i == len(stream) or stream[i] in ':':
            savei1 = i
            # <String ':'>
            if stream.startswith(':', i):
                out = ':'
                i += 1
            else:
                out = Miss
            i = savei1
            if out is Failure:
                out = Miss
                break
            elif out is not Miss:
                break
        if i == len(stream) or stream[i] in '\\':
            savei1 = i
            out, i = escchar(stream, i, context)
            if out is Miss:
                i = savei1 + 1
            elif out is Failure:
                out = Miss
                break
            elif i <= savei1:
                raise Exception
            else:
                if savei1 > lasti:
                    output1.append(stream[lasti:savei1])
                output1.append(out)
                lasti = i
        else:
            i += 1
    if i > lasti:
        output1.append(stream[lasti:i])
    out = output1
    return out, i


def dqstring(stream, i, context):
    # <Seq dqstring>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '"':
        active1 = False
        out = Miss
    if active1:
        # <String '"'>
        if stream.startswith('"', i):
            out = '"'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 's'>
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            if i == len(stream) or stream[i] in '"':
                savei2 = i
                # <String '"'>
                if stream.startswith('"', i):
                    out = '"'
                    i += 1
                else:
                    out = Miss
                i = savei2
                if out is Failure:
                    out = Miss
                    break
                elif out is not Miss:
                    break
            if i == len(stream) or stream[i] in '\\':
                savei2 = i
                out, i = escchar(stream, i, context)
                if out is Miss:
                    i = savei2 + 1
                elif out is Failure:
                    out = Miss
                    break
                elif i <= savei2:
                    raise Exception
                else:
                    if savei2 > lasti:
                        output1.append(stream[lasti:savei2])
                    output1.append(out)
                    lasti = i
            else:
                i += 1
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            context['s'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '"':
        active1 = False
        out = Miss
    if active1:
        # <String '"'>
        if stream.startswith('"', i):
            out = '"'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do ''.join(s)>
        out = eval(_do8, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def itemext(stream, i, context):
    # <Seq itemext>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Plus>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Call hspace()>
            out, i = hspace(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 1:
            out = output1
        else:
            out = Miss
            i = savei2
        active1 = out is not Miss
    if active1:
        # <Bind 's'>
        # <Or>
        targets = None_fm5[None]
        if i < len(stream):
            targets = None_fm5.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        if out is not Miss:
            context['s'] = out
        active1 = out is not Miss
    if active1:
        # <Do ''.join(s)>
        out = eval(_do8, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def itemtype(stream, i, context):
    # <Seq itemtype>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in ':':
        active1 = False
        out = Miss
    if active1:
        # <String ':'>
        if stream.startswith(':', i):
            out = ':'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'n'>
        out, i = itemname(stream, i, context)
        if out is not Miss:
            context['n'] = out
        active1 = out is not Miss
    if active1:
        # <Bind 'ext'>
        # <Opt>
        # <Seq>
        savei2 = i
        savectx2 = context
        context = context.push()
        active2 = True
        if active2:
            # <If n>
            out = Empty if eval(_if1, context.namespace, context) else Miss
            active2 = out is not Miss
        if active2:
            # <Call itemext()>
            out, i = itemext(stream, i, context)
            active2 = out is not Miss
        context = savectx2
        if not active2:
            i = savei2
        if out is Miss:
            out = []
        else:
            out = [out]
        if out is not Miss:
            context['ext'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ':':
        active1 = False
        out = Miss
    if active1:
        # <String ':'>
        if stream.startswith(':', i):
            out = ':'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do (n, ext[0] if ext else None)>
        out = eval(_do9, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_string3(stream, i, context):
    # <String anon_string3>
    if stream.startswith('==', i):
        out = '=='
        i += 2
    else:
        out = Miss
    return out, i


def anon_string4(stream, i, context):
    # <String anon_string4>
    if stream.startswith('{{{', i):
        out = '{{{'
        i += 3
    else:
        out = Miss
    return out, i


def anon_string5(stream, i, context):
    # <String anon_string5>
    if stream.startswith('~~', i):
        out = '~~'
        i += 2
    else:
        out = Miss
    return out, i


def starters(stream, i, context):
    # <Seq starters>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        out, i = linestart(stream, i, context)
        active1 = out is not Miss
    if active1:
        out, i = hspaces(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '{/=#:~-*':
        active1 = False
        out = Miss
    if active1:
        # <Or>
        targets = None_fm6[None]
        if i < len(stream):
            targets = None_fm6.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_seq2(stream, i, context):
    # <Seq anon_seq2>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '\n':
        active1 = False
        out = Miss
    if active1:
        # <String '\n'>
        if stream.startswith('\n', i):
            out = '\n'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Peek>
        savei2 = i
        # <Call starters()>
        out, i = starters(stream, i, context)
        if out is not Miss:
            out = Empty
        i = savei2
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def break_(stream, i, context):
    # <Or break_>
    targets = break__fm1[None]
    if i < len(stream):
        targets = break__fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def anon_failif1(stream, i, context):
    # <FailIf anon_failif1>
    savei1 = i
    # <Call break_()>
    out, i = break_(stream, i, context)
    if out is not Miss:
        out = Failure
    i = savei1
    return out, i


def html_comment(stream, i, context):
    # <Seq html_comment>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '<':
        active1 = False
        out = Miss
    if active1:
        # <String '<!--'>
        if stream.startswith('<!--', i):
            out = '<!--'
            i += 4
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            if i == len(stream) or stream[i] in '-':
                savei2 = i
                # <String '-->'>
                if stream.startswith('-->', i):
                    out = '-->'
                    i += 3
                else:
                    out = Miss
                i = savei2
                if out is Failure:
                    out = Miss
                    break
                elif out is not Miss:
                    break
            i += 1
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '-':
        active1 = False
        out = Miss
    if active1:
        # <String '-->'>
        if stream.startswith('-->', i):
            out = '-->'
            i += 3
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do ''>
        out = ''
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def anon_seq3(stream, i, context):
    # <Seq anon_seq3>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '<':
        active1 = False
        out = Miss
    if active1:
        out, i = html_comment(stream, i, context)
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def line_comment(stream, i, context):
    # <Seq line_comment>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'indent'>
        out, i = linestart(stream, i, context)
        if out is not Miss:
            context['indent'] = out
        active1 = out is not Miss
    if active1:
        # <Star>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Call hspace()>
            out, i = hspace(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 0:
            out = output1
        else:
            out = Miss
            i = savei2
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '/':
        active1 = False
        out = Miss
    if active1:
        # <String '//'>
        if stream.startswith('//', i):
            out = '//'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Mixed>
        output2 = []
        lasti = i
        while i < len(stream):
            if i == len(stream) or stream[i] in '\x03\n':
                savei3 = i
                out, i = lineend(stream, i, context)
                i = savei3
                if out is Failure:
                    out = Miss
                    break
                elif out is not Miss:
                    break
            i += 1
        if i > lasti:
            output2.append(stream[lasti:i])
        out = output2
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '\x03\n':
        active1 = False
        out = Miss
    if active1:
        out, i = lineend(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Do "">
        out = ""
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def comment(stream, i, context):
    # <Or comment>
    targets = comment_fm1[None]
    if i < len(stream):
        targets = comment_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def anon_failif2(stream, i, context):
    # <FailIf anon_failif2>
    savei1 = i
    # <Call break_()>
    out, i = break_(stream, i, context)
    if out is not Miss:
        out = Failure
    i = savei1
    return out, i


def env(stream, i, context):
    # <Seq env>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '%':
        active1 = False
        out = Miss
    if active1:
        # <String '%{'>
        if stream.startswith('%{', i):
            out = '%{'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in 'FDoMXTSId_KAUsbjr4OmavRY0Bz16PkZnpgNy2eG53HQCWhiqx78ltEJVw9ucLf':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'n'>
        out, i = identifier(stream, i, context)
        if out is not Miss:
            context['n'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '}':
        active1 = False
        out = Miss
    if active1:
        # <String '}'>
        if stream.startswith('}', i):
            out = '}'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do w.span("env", [], name=n)>
        out = eval(_do10, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def named_entity(stream, i, context):
    # <Seq named_entity>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'n'>
        # <Regex '[A-Za-z]+'>
        match1 = _regex4.match(stream, i)
        if match1:
            out = match1.group(0)
            i = match1.end()
            context.update(match1.groupdict())
        else:
            out = Miss
        if out is not Miss:
            context['n'] = out
        active1 = out is not Miss
    if active1:
        # <Do util.decode_named_entity(n)>
        out = eval(_do11, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def digit(stream, i, context):
    # <Among digit>
    if i < len(stream) and stream[i] in _charset5:
        out = stream[i]
        i += 1
    else:
        out = Miss
    return out, i


def chardec(stream, i, context):
    # <Seq chardec>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '0123456789':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'd'>
        # <Take>
        savei2 = i
        # <Plus>
        savei3 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Call digit()>
            out, i = digit(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 1:
            out = output1
        else:
            out = Miss
            i = savei3
        if out is not Miss:
            out = stream[savei2:i]
        if out is not Miss:
            context['d'] = out
        active1 = out is not Miss
    if active1:
        # <Do int(d)>
        out = eval(_do12, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def charhex(stream, i, context):
    # <Seq charhex>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in 'x':
        active1 = False
        out = Miss
    if active1:
        # <String 'x'>
        if stream.startswith('x', i):
            out = 'x'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '0123456789abcdefABCDEF':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'h'>
        # <Take>
        savei2 = i
        # <Plus>
        savei3 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Among '0123456789abcdefABCDEF'>
            if i < len(stream) and stream[i] in _charset6:
                out = stream[i]
                i += 1
            else:
                out = Miss
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 1:
            out = output1
        else:
            out = Miss
            i = savei3
        if out is not Miss:
            out = stream[savei2:i]
        if out is not Miss:
            context['h'] = out
        active1 = out is not Miss
    if active1:
        # <Do int(h, 16)>
        out = eval(_do13, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def charnum(stream, i, context):
    # <Or charnum>
    targets = charnum_fm1[None]
    if i < len(stream):
        targets = charnum_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def num_entity(stream, i, context):
    # <Seq num_entity>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '#':
        active1 = False
        out = Miss
    if active1:
        # <String '#'>
        if stream.startswith('#', i):
            out = '#'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in 'x0761824953':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'num'>
        out, i = charnum(stream, i, context)
        if out is not Miss:
            context['num'] = out
        active1 = out is not Miss
    if active1:
        # <Do util.unichr(num)>
        out = eval(_do14, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def entity(stream, i, context):
    # <Seq entity>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '&':
        active1 = False
        out = Miss
    if active1:
        # <String '&'>
        if stream.startswith('&', i):
            out = '&'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'char'>
        # <Or>
        targets = None_fm7[None]
        if i < len(stream):
            targets = None_fm7.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        if out is not Miss:
            context['char'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ';':
        active1 = False
        out = Miss
    if active1:
        # <String ';'>
        if stream.startswith(';', i):
            out = ';'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do char>
        out = eval(_do15, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_string6(stream, i, context):
    # <String anon_string6>
    if stream.startswith(' ', i):
        out = ' '
        i += 1
    else:
        out = Miss
    return out, i


def anon_string7(stream, i, context):
    # <String anon_string7>
    if stream.startswith('))', i):
        out = '))'
        i += 2
    else:
        out = Miss
    return out, i


def keyname(stream, i, context):
    # <Take keyname>
    savei1 = i
    # <Mixed>
    output1 = []
    lasti = i
    while i < len(stream):
        if i == len(stream) or stream[i] in ' )':
            savei2 = i
            # <Or>
            targets = None_fm8[None]
            if i < len(stream):
                targets = None_fm8.get(stream[i], targets)
            if targets:
                for rule in targets:
                    out, new = rule(stream, i, context)
                    if out is not Miss:
                        i = new
                        break
                else:
                    out = Miss
            else:
                out = Miss
            i = savei2
            if out is Failure:
                out = Miss
                break
            elif out is not Miss:
                break
        i += 1
    if i > lasti:
        output1.append(stream[lasti:i])
    out = output1
    if out is not Miss:
        out = stream[savei1:i]
    return out, i


def anon_seq4(stream, i, context):
    # <Seq anon_seq4>
    savei1 = i
    active1 = True
    if active1:
        # <Plus>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Call hspace()>
            out, i = hspace(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 1:
            out = output1
        else:
            out = Miss
            i = savei2
        active1 = out is not Miss
    if active1:
        out, i = keyname(stream, i, context)
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def anon_seq5(stream, i, context):
    # <Seq anon_seq5>
    savei1 = i
    active1 = True
    if active1:
        # <Not>
        # <String '('>
        if stream.startswith('(', i):
            out = '('
            i += 1
        else:
            out = Miss
        if out is Miss:
            out = Empty
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        out, i = keyname(stream, i, context)
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def keys(stream, i, context):
    # <Seq keys>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '(':
        active1 = False
        out = Miss
    if active1:
        # <String '(('>
        if stream.startswith('((', i):
            out = '(('
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'k'>
        # <Or>
        targets = None_fm9[None]
        if i < len(stream):
            targets = None_fm9.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        if out is not Miss:
            context['k'] = out
        active1 = out is not Miss
    if active1:
        # <Bind 'kk'>
        # <Star>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Seq>
            savei3 = i
            active2 = True
            if active2:
                # <Star>
                savei4 = i
                times2 = 0
                output2 = []
                while i <= len(stream):
                    previ2 = i
                    # <Call hspace()>
                    out, i = hspace(stream, i, context)
                    if out is Miss:
                        break
                    if i <= previ2:
                        if stream.startswith('\x03', i) or i == len(stream):
                            break
                        raise Exception
                    if out is not Empty:
                        output2.append(out)
                    times2 += 1
                if times2 >= 0:
                    out = output2
                else:
                    out = Miss
                    i = savei4
                active2 = out is not Miss
            if active2 and i < len(stream) and stream[i] not in '+':
                active2 = False
                out = Miss
            if active2:
                # <String '+'>
                if stream.startswith('+', i):
                    out = '+'
                    i += 1
                else:
                    out = Miss
                active2 = out is not Miss
            if active2:
                # <Star>
                savei5 = i
                times3 = 0
                output3 = []
                while i <= len(stream):
                    previ3 = i
                    # <Call hspace()>
                    out, i = hspace(stream, i, context)
                    if out is Miss:
                        break
                    if i <= previ3:
                        if stream.startswith('\x03', i) or i == len(stream):
                            break
                        raise Exception
                    if out is not Empty:
                        output3.append(out)
                    times3 += 1
                if times3 >= 0:
                    out = output3
                else:
                    out = Miss
                    i = savei5
                active2 = out is not Miss
            if active2:
                # <Call keyname()>
                out, i = keyname(stream, i, context)
                active2 = out is not Miss
            if not active2:
                i = savei3
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 0:
            out = output1
        else:
            out = Miss
            i = savei2
        if out is not Miss:
            context['kk'] = out
        active1 = out is not Miss
    if active1:
        # <Star>
        savei6 = i
        times4 = 0
        output4 = []
        while i <= len(stream):
            previ4 = i
            # <Call hspace()>
            out, i = hspace(stream, i, context)
            if out is Miss:
                break
            if i <= previ4:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output4.append(out)
            times4 += 1
        if times4 >= 0:
            out = output4
        else:
            out = Miss
            i = savei6
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ')':
        active1 = False
        out = Miss
    if active1:
        # <String '))'>
        if stream.startswith('))', i):
            out = '))'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do w.span("keys", None, keys=[k] + kk)>
        out = eval(_do16, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def streamstart(stream, i, context):
    # <StreamStart streamstart>
    if i == 0:
        out = Empty
    else:
        out = Miss
    return out, i


def anon_not1(stream, i, context):
    # <Not anon_not1>
    # <LookBehind>
    savei1 = i
    i -= 1
    # <Call2 r.alphanum()>
    out, i = r.alphanum(stream, i, context)
    if out is not Miss and i == savei1:
        out = Empty
    else:
        out = Miss
        i = savei1
    if out is Miss:
        out = Empty
    else:
        out = Miss
    return out, i


def wordstart(stream, i, context):
    # <Or wordstart>
    targets = wordstart_fm1[None]
    if i < len(stream):
        targets = wordstart_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def anon_failif3(stream, i, context):
    # <FailIf anon_failif3>
    savei1 = i
    # <Call break_()>
    out, i = break_(stream, i, context)
    if out is not Miss:
        out = Failure
    i = savei1
    return out, i


def anon_string8(stream, i, context):
    # <String anon_string8>
    if stream.startswith('*', i):
        out = '*'
        i += 1
    else:
        out = Miss
    return out, i


def anon_not2(stream, i, context):
    # <Not anon_not2>
    # <Peek>
    savei1 = i
    # <Call2 r.alphanum()>
    out, i = r.alphanum(stream, i, context)
    if out is not Miss:
        out = Empty
    i = savei1
    if out is Miss:
        out = Empty
    else:
        out = Miss
    return out, i


def wordend(stream, i, context):
    # <Or wordend>
    targets = wordend_fm1[None]
    if i < len(stream):
        targets = wordend_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def strong(stream, i, context):
    # <Seq strong>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        out, i = wordstart(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Not>
        # <LookBehind>
        savei2 = i
        i -= 1
        # <String '*'>
        if stream.startswith('*', i):
            out = '*'
            i += 1
        else:
            out = Miss
        if out is not Miss and i == savei2:
            out = Empty
        else:
            out = Miss
            i = savei2
        if out is Miss:
            out = Empty
        else:
            out = Miss
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '*':
        active1 = False
        out = Miss
    if active1:
        # <String '*'>
        if stream.startswith('*', i):
            out = '*'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'tx'>
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            savei3 = i
            # <Or>
            targets = None_fm10[None]
            if i < len(stream):
                targets = None_fm10.get(stream[i], targets)
            if targets:
                for rule in targets:
                    out, new = rule(stream, i, context)
                    if out is not Miss:
                        i = new
                        break
                else:
                    out = Miss
            else:
                out = Miss
            i = savei3
            if out is Failure:
                out = Miss
                break
            elif out is not Miss:
                break
            savei3 = i
            out, i = inline(stream, i, context)
            if out is Miss:
                i = savei3 + 1
            elif out is Failure:
                out = Miss
                break
            elif i <= savei3:
                raise Exception
            else:
                if savei3 > lasti:
                    output1.append(stream[lasti:savei3])
                output1.append(out)
                lasti = i
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            context['tx'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '*':
        active1 = False
        out = Miss
    if active1:
        # <String '*'>
        if stream.startswith('*', i):
            out = '*'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        out, i = wordend(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Not>
        # <Peek>
        savei4 = i
        # <String '*'>
        if stream.startswith('*', i):
            out = '*'
            i += 1
        else:
            out = Miss
        if out is not Miss:
            out = Empty
        i = savei4
        if out is Miss:
            out = Empty
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do w.span("strong", tx)>
        out = eval(_do17, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_failif4(stream, i, context):
    # <FailIf anon_failif4>
    savei1 = i
    # <Call break_()>
    out, i = break_(stream, i, context)
    if out is not Miss:
        out = Failure
    i = savei1
    return out, i


def anon_string9(stream, i, context):
    # <String anon_string9>
    if stream.startswith(')', i):
        out = ')'
        i += 1
    else:
        out = Miss
    return out, i


def glyph(stream, i, context):
    # <Seq glyph>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '+':
        active1 = False
        out = Miss
    if active1:
        # <String '+('>
        if stream.startswith('+(', i):
            out = '+('
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'v'>
        # <Take>
        savei2 = i
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            savei3 = i
            # <Or>
            targets = None_fm11[None]
            if i < len(stream):
                targets = None_fm11.get(stream[i], targets)
            if targets:
                for rule in targets:
                    out, new = rule(stream, i, context)
                    if out is not Miss:
                        i = new
                        break
                else:
                    out = Miss
            else:
                out = Miss
            i = savei3
            if out is Failure:
                out = Miss
                break
            elif out is not Miss:
                break
            i += 1
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            out = stream[savei2:i]
        if out is not Miss:
            context['v'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ')':
        active1 = False
        out = Miss
    if active1:
        # <String ')'>
        if stream.startswith(')', i):
            out = ')'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do w.span("link", None, scheme="Glyph", value=v)>
        out = eval(_do18, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def xname(stream, i, context):
    # <Seq xname>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_0123456789':
        active1 = False
        out = Miss
    if active1:
        # <Peek>
        savei2 = i
        # <Call xchar()>
        out, i = xchar(stream, i, context)
        if out is not Miss:
            out = Empty
        i = savei2
        active1 = out is not Miss
    if active1:
        # <Take>
        savei3 = i
        # <Regex '[-A-Za-z_0-9]+'>
        match1 = _regex5.match(stream, i)
        if match1:
            out = match1.group(0)
            i = match1.end()
            context.update(match1.groupdict())
        else:
            out = Miss
        if out is not Miss:
            out = stream[savei3:i]
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def attr(stream, i, context):
    # <Seq attr>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in 'FDoMXTSId_KAUsbjr4OmavRY0Bz16PkZnpgNy2eG53HQCWhiqx78ltEJVw9ucLf':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'k'>
        out, i = xname(stream, i, context)
        if out is not Miss:
            context['k'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '=':
        active1 = False
        out = Miss
    if active1:
        # <String '="'>
        if stream.startswith('="', i):
            out = '="'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'v'>
        # <Take>
        savei2 = i
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            if i == len(stream) or stream[i] in '"':
                savei3 = i
                # <String '"'>
                if stream.startswith('"', i):
                    out = '"'
                    i += 1
                else:
                    out = Miss
                i = savei3
                if out is Failure:
                    out = Miss
                    break
                elif out is not Miss:
                    break
            i += 1
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            out = stream[savei2:i]
        if out is not Miss:
            context['v'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '"':
        active1 = False
        out = Miss
    if active1:
        # <String '"'>
        if stream.startswith('"', i):
            out = '"'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do (k, v)>
        out = eval(_do19, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def attrlist(stream, i, context):
    # <Seq attrlist>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'attrs'>
        # <Star>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Call attr()>
            out, i = attr(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 0:
            out = output1
        else:
            out = Miss
            i = savei2
        if out is not Miss:
            context['attrs'] = out
        active1 = out is not Miss
    if active1:
        # <Do dict(attrs)>
        out = eval(_do20, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_seq6(stream, i, context):
    # <Seq anon_seq6>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '<':
        active1 = False
        out = Miss
    if active1:
        # <String '<'>
        if stream.startswith('<', i):
            out = '<'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in 'FDoMXTSId_KAUsbjr4OmavRY0Bz16PkZnpgNy2eG53HQCWhiqx78ltEJVw9ucLf':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'n'>
        out, i = xname(stream, i, context)
        if out is not Miss:
            context['n'] = out
        active1 = out is not Miss
    if active1:
        # <Bind 'alist'>
        out, i = attrlist(stream, i, context)
        if out is not Miss:
            context['alist'] = out
        active1 = out is not Miss
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '/':
        active1 = False
        out = Miss
    if active1:
        # <String '/>'>
        if stream.startswith('/>', i):
            out = '/>'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do w.span("xml", '', tag=n, attrs=alist)>
        out = eval(_do21, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def ctag(stream, i, context):
    # <Params ctag>
    # <Seq>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '<':
        active1 = False
        out = Miss
    if active1:
        # <String '</'>
        if stream.startswith('</', i):
            out = '</'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in 'FDoMXTSId_KAUsbjr4OmavRY0Bz16PkZnpgNy2eG53HQCWhiqx78ltEJVw9ucLf':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'name'>
        out, i = xname(stream, i, context)
        if out is not Miss:
            context['name'] = out
        active1 = out is not Miss
    if active1:
        # <If n == name>
        out = Empty if eval(_if2, context.namespace, context) else Miss
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '>':
        active1 = False
        out = Miss
    if active1:
        # <String '>'>
        if stream.startswith('>', i):
            out = '>'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_seq7(stream, i, context):
    # <Seq anon_seq7>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '<':
        active1 = False
        out = Miss
    if active1:
        # <String '<'>
        if stream.startswith('<', i):
            out = '<'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in 'FDoMXTSId_KAUsbjr4OmavRY0Bz16PkZnpgNy2eG53HQCWhiqx78ltEJVw9ucLf':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'n'>
        out, i = xname(stream, i, context)
        if out is not Miss:
            context['n'] = out
        active1 = out is not Miss
    if active1:
        # <Bind 'alist'>
        out, i = attrlist(stream, i, context)
        if out is not Miss:
            context['alist'] = out
        active1 = out is not Miss
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '>':
        active1 = False
        out = Miss
    if active1:
        # <String '>'>
        if stream.startswith('>', i):
            out = '>'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <IfCode _stream.find("</%s>" % _context['n'], _i) >= 0>
        out = Empty if (stream.find("</%s>" % context['n'], i) >= 0) else Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'tx'>
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            if i == len(stream) or stream[i] in '<':
                savei2 = i
                # <String '</'>
                if stream.startswith('</', i):
                    out = '</'
                    i += 2
                else:
                    out = Miss
                i = savei2
                if out is Failure:
                    out = Miss
                    break
                elif out is not Miss:
                    break
            if i == len(stream) or stream[i] in ' x=&<.[*/`%+"_(\'-':
                savei2 = i
                out, i = spans(stream, i, context)
                if out is Miss:
                    i = savei2 + 1
                elif out is Failure:
                    out = Miss
                    break
                elif i <= savei2:
                    raise Exception
                else:
                    if savei2 > lasti:
                        output1.append(stream[lasti:savei2])
                    output1.append(out)
                    lasti = i
            else:
                i += 1
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            context['tx'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '<':
        active1 = False
        out = Miss
    if active1:
        # <Call ctag(n)>
        out, i = ctag(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Do w.span("xml", tx, tag=n, attrs=alist)>
        out = eval(_do22, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def xml(stream, i, context):
    # <Or xml>
    targets = xml_fm1[None]
    if i < len(stream):
        targets = xml_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def anon_failif5(stream, i, context):
    # <FailIf anon_failif5>
    savei1 = i
    # <Call break_()>
    out, i = break_(stream, i, context)
    if out is not Miss:
        out = Failure
    i = savei1
    return out, i


def anon_string10(stream, i, context):
    # <String anon_string10>
    if stream.startswith('>>', i):
        out = '>>'
        i += 2
    else:
        out = Miss
    return out, i


def var(stream, i, context):
    # <Seq var>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Not>
        # <LookBehind>
        savei2 = i
        i -= 1
        # <String '<'>
        if stream.startswith('<', i):
            out = '<'
            i += 1
        else:
            out = Miss
        if out is not Miss and i == savei2:
            out = Empty
        else:
            out = Miss
            i = savei2
        if out is Miss:
            out = Empty
        else:
            out = Miss
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '<':
        active1 = False
        out = Miss
    if active1:
        # <String '<<'>
        if stream.startswith('<<', i):
            out = '<<'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'tx'>
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            savei3 = i
            # <Or>
            targets = None_fm12[None]
            if i < len(stream):
                targets = None_fm12.get(stream[i], targets)
            if targets:
                for rule in targets:
                    out, new = rule(stream, i, context)
                    if out is not Miss:
                        i = new
                        break
                else:
                    out = Miss
            else:
                out = Miss
            i = savei3
            if out is Failure:
                out = Miss
                break
            elif out is not Miss:
                break
            savei3 = i
            out, i = inline(stream, i, context)
            if out is Miss:
                i = savei3 + 1
            elif out is Failure:
                out = Miss
                break
            elif i <= savei3:
                raise Exception
            else:
                if savei3 > lasti:
                    output1.append(stream[lasti:savei3])
                output1.append(out)
                lasti = i
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            context['tx'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '>':
        active1 = False
        out = Miss
    if active1:
        # <String '>>'>
        if stream.startswith('>>', i):
            out = '>>'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Not>
        # <Peek>
        savei4 = i
        # <String '>'>
        if stream.startswith('>', i):
            out = '>'
            i += 1
        else:
            out = Miss
        if out is not Miss:
            out = Empty
        i = savei4
        if out is Miss:
            out = Empty
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do w.span("var", tx)>
        out = eval(_do23, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def targetre(stream, i, context):
    # <Regex targetre>
    match1 = _regex6.match(stream, i)
    if match1:
        out = match1.group(0)
        i = match1.end()
        context.update(match1.groupdict())
    else:
        out = Miss
    return out, i


def anonlink(stream, i, context):
    # <Seq anonlink>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '[':
        active1 = False
        out = Miss
    if active1:
        # <String '['>
        if stream.startswith('[', i):
            out = '['
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        out, i = targetre(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ']':
        active1 = False
        out = Miss
    if active1:
        # <String ']'>
        if stream.startswith(']', i):
            out = ']'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do w.span("link", '', scheme=name, value=value)>
        out = eval(_do24, globals(), context)
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def textlink(stream, i, context):
    # <Seq textlink>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '[':
        active1 = False
        out = Miss
    if active1:
        # <String '['>
        if stream.startswith('[', i):
            out = '['
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'tx'>
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            if i == len(stream) or stream[i] in '|':
                savei2 = i
                # <String '|'>
                if stream.startswith('|', i):
                    out = '|'
                    i += 1
                else:
                    out = Miss
                i = savei2
                if out is Failure:
                    out = Miss
                    break
                elif out is not Miss:
                    break
            savei2 = i
            out, i = stylespans(stream, i, context)
            if out is Miss:
                i = savei2 + 1
            elif out is Failure:
                out = Miss
                break
            elif i <= savei2:
                raise Exception
            else:
                if savei2 > lasti:
                    output1.append(stream[lasti:savei2])
                output1.append(out)
                lasti = i
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            context['tx'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '|':
        active1 = False
        out = Miss
    if active1:
        # <String '|'>
        if stream.startswith('|', i):
            out = '|'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        out, i = targetre(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ']':
        active1 = False
        out = Miss
    if active1:
        # <String ']'>
        if stream.startswith(']', i):
            out = ']'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do w.span("link", tx, scheme=name, value=value)>
        out = eval(_do25, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def link(stream, i, context):
    # <Or link>
    targets = link_fm1[None]
    if i < len(stream):
        targets = link_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def anon_failif6(stream, i, context):
    # <FailIf anon_failif6>
    savei1 = i
    # <Call break_()>
    out, i = break_(stream, i, context)
    if out is not Miss:
        out = Failure
    i = savei1
    return out, i


def anon_string11(stream, i, context):
    # <String anon_string11>
    if stream.startswith('__', i):
        out = '__'
        i += 2
    else:
        out = Miss
    return out, i


def space(stream, i, context):
    # <Regex space>
    match1 = _regex7.match(stream, i)
    if match1:
        out = match1.group(0)
        i = match1.end()
        context.update(match1.groupdict())
    else:
        out = Miss
    return out, i


def uisep(stream, i, context):
    # <Seq uisep>
    savei1 = i
    active1 = True
    if active1:
        # <Plus>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Call space()>
            out, i = space(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 1:
            out = output1
        else:
            out = Miss
            i = savei2
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '>':
        active1 = False
        out = Miss
    if active1:
        # <String '>'>
        if stream.startswith('>', i):
            out = '>'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Plus>
        savei3 = i
        times2 = 0
        output2 = []
        while i <= len(stream):
            previ2 = i
            # <Call space()>
            out, i = space(stream, i, context)
            if out is Miss:
                break
            if i <= previ2:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output2.append(out)
            times2 += 1
        if times2 >= 1:
            out = output2
        else:
            out = Miss
            i = savei3
        active1 = out is not Miss
    if active1:
        # <Do u" \u25b8 ">
        out = u" \u25b8 "
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def ui(stream, i, context):
    # <Seq ui>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        out, i = wordstart(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Not>
        # <LookBehind>
        savei2 = i
        i -= 1
        # <String '_'>
        if stream.startswith('_', i):
            out = '_'
            i += 1
        else:
            out = Miss
        if out is not Miss and i == savei2:
            out = Empty
        else:
            out = Miss
            i = savei2
        if out is Miss:
            out = Empty
        else:
            out = Miss
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '_':
        active1 = False
        out = Miss
    if active1:
        # <String '__'>
        if stream.startswith('__', i):
            out = '__'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'tx'>
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            savei3 = i
            # <Or>
            targets = None_fm13[None]
            if i < len(stream):
                targets = None_fm13.get(stream[i], targets)
            if targets:
                for rule in targets:
                    out, new = rule(stream, i, context)
                    if out is not Miss:
                        i = new
                        break
                else:
                    out = Miss
            else:
                out = Miss
            i = savei3
            if out is Failure:
                out = Miss
                break
            elif out is not Miss:
                break
            savei3 = i
            # <Or>
            targets = None_fm14[None]
            if i < len(stream):
                targets = None_fm14.get(stream[i], targets)
            if targets:
                for rule in targets:
                    out, new = rule(stream, i, context)
                    if out is not Miss:
                        i = new
                        break
                else:
                    out = Miss
            else:
                out = Miss
            if out is Miss:
                i = savei3 + 1
            elif out is Failure:
                out = Miss
                break
            elif i <= savei3:
                raise Exception
            else:
                if savei3 > lasti:
                    output1.append(stream[lasti:savei3])
                output1.append(out)
                lasti = i
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            context['tx'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '_':
        active1 = False
        out = Miss
    if active1:
        # <String '__'>
        if stream.startswith('__', i):
            out = '__'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        out, i = wordend(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Not>
        # <Peek>
        savei4 = i
        # <String '_'>
        if stream.startswith('_', i):
            out = '_'
            i += 1
        else:
            out = Miss
        if out is not Miss:
            out = Empty
        i = savei4
        if out is Miss:
            out = Empty
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do w.span("ui", tx)>
        out = eval(_do26, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_failif7(stream, i, context):
    # <FailIf anon_failif7>
    savei1 = i
    # <Call break_()>
    out, i = break_(stream, i, context)
    if out is not Miss:
        out = Failure
    i = savei1
    return out, i


def anon_string12(stream, i, context):
    # <String anon_string12>
    if stream.startswith('_', i):
        out = '_'
        i += 1
    else:
        out = Miss
    return out, i


def em(stream, i, context):
    # <Seq em>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        out, i = wordstart(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Not>
        # <LookBehind>
        savei2 = i
        i -= 1
        # <String '_'>
        if stream.startswith('_', i):
            out = '_'
            i += 1
        else:
            out = Miss
        if out is not Miss and i == savei2:
            out = Empty
        else:
            out = Miss
            i = savei2
        if out is Miss:
            out = Empty
        else:
            out = Miss
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '_':
        active1 = False
        out = Miss
    if active1:
        # <String '_'>
        if stream.startswith('_', i):
            out = '_'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'tx'>
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            savei3 = i
            # <Or>
            targets = None_fm15[None]
            if i < len(stream):
                targets = None_fm15.get(stream[i], targets)
            if targets:
                for rule in targets:
                    out, new = rule(stream, i, context)
                    if out is not Miss:
                        i = new
                        break
                else:
                    out = Miss
            else:
                out = Miss
            i = savei3
            if out is Failure:
                out = Miss
                break
            elif out is not Miss:
                break
            savei3 = i
            out, i = inline(stream, i, context)
            if out is Miss:
                i = savei3 + 1
            elif out is Failure:
                out = Miss
                break
            elif i <= savei3:
                raise Exception
            else:
                if savei3 > lasti:
                    output1.append(stream[lasti:savei3])
                output1.append(out)
                lasti = i
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            context['tx'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '_':
        active1 = False
        out = Miss
    if active1:
        # <String '_'>
        if stream.startswith('_', i):
            out = '_'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Not>
        # <Peek>
        savei4 = i
        # <String '_'>
        if stream.startswith('_', i):
            out = '_'
            i += 1
        else:
            out = Miss
        if out is not Miss:
            out = Empty
        i = savei4
        if out is Miss:
            out = Empty
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        out, i = wordend(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Do w.span("em", tx)>
        out = eval(_do27, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_failif8(stream, i, context):
    # <FailIf anon_failif8>
    savei1 = i
    # <Call break_()>
    out, i = break_(stream, i, context)
    if out is not Miss:
        out = Failure
    i = savei1
    return out, i


def anon_string13(stream, i, context):
    # <String anon_string13>
    if stream.startswith('`', i):
        out = '`'
        i += 1
    else:
        out = Miss
    return out, i


def code(stream, i, context):
    # <Seq code>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '`':
        active1 = False
        out = Miss
    if active1:
        # <String '`'>
        if stream.startswith('`', i):
            out = '`'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'tx'>
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            savei2 = i
            # <Or>
            targets = None_fm16[None]
            if i < len(stream):
                targets = None_fm16.get(stream[i], targets)
            if targets:
                for rule in targets:
                    out, new = rule(stream, i, context)
                    if out is not Miss:
                        i = new
                        break
                else:
                    out = Miss
            else:
                out = Miss
            i = savei2
            if out is Failure:
                out = Miss
                break
            elif out is not Miss:
                break
            if i == len(stream) or stream[i] in '<':
                savei2 = i
                out, i = var(stream, i, context)
                if out is Miss:
                    i = savei2 + 1
                elif out is Failure:
                    out = Miss
                    break
                elif i <= savei2:
                    raise Exception
                else:
                    if savei2 > lasti:
                        output1.append(stream[lasti:savei2])
                    output1.append(out)
                    lasti = i
            else:
                i += 1
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            context['tx'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '`':
        active1 = False
        out = Miss
    if active1:
        # <String '`'>
        if stream.startswith('`', i):
            out = '`'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do w.span("code", tx)>
        out = eval(_do28, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def spans(stream, i, context):
    # <Or spans>
    targets = spans_fm1[None]
    if i < len(stream):
        targets = spans_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def inline(stream, i, context):
    # <Or inline>
    targets = inline_fm1[None]
    if i < len(stream):
        targets = inline_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def quotes(stream, i, context):
    # <Seq quotes>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '"':
        active1 = False
        out = Miss
    if active1:
        # <String '"'>
        if stream.startswith('"', i):
            out = '"'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'tx'>
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            if i == len(stream) or stream[i] in '"':
                savei2 = i
                # <String '"'>
                if stream.startswith('"', i):
                    out = '"'
                    i += 1
                else:
                    out = Miss
                i = savei2
                if out is Failure:
                    out = Miss
                    break
                elif out is not Miss:
                    break
            savei2 = i
            out, i = inline(stream, i, context)
            if out is Miss:
                i = savei2 + 1
            elif out is Failure:
                out = Miss
                break
            elif i <= savei2:
                raise Exception
            else:
                if savei2 > lasti:
                    output1.append(stream[lasti:savei2])
                output1.append(out)
                lasti = i
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            context['tx'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '"':
        active1 = False
        out = Miss
    if active1:
        # <String '"'>
        if stream.startswith('"', i):
            out = '"'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do w.span("q", tx)>
        out = eval(_do29, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def alphachar(stream, i, context):
    # <Seq alphachar>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'c'>
        out, i = any_(stream, i, context)
        if out is not Miss:
            context['c'] = out
        active1 = out is not Miss
    if active1:
        # <If c.isalpha()>
        out = Empty if eval(_if3, context.namespace, context) else Miss
        active1 = out is not Miss
    if active1:
        # <Do c>
        out = eval(_do30, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_string14(stream, i, context):
    # <String anon_string14>
    if stream.startswith('LL', i):
        out = 'LL'
        i += 2
    else:
        out = Miss
    return out, i


def anon_string15(stream, i, context):
    # <String anon_string15>
    if stream.startswith('NT', i):
        out = 'NT'
        i += 2
    else:
        out = Miss
    return out, i


def anon_among2(stream, i, context):
    # <Among anon_among2>
    if i < len(stream) and stream[i] in _charset7:
        out = stream[i]
        i += 1
    else:
        out = Miss
    return out, i


def anon_among3(stream, i, context):
    # <Among anon_among3>
    if i < len(stream) and stream[i] in _charset8:
        out = stream[i]
        i += 1
    else:
        out = Miss
    return out, i


def anon_string16(stream, i, context):
    # <String anon_string16>
    if stream.startswith('ll', i):
        out = 'll'
        i += 2
    else:
        out = Miss
    return out, i


def anon_string17(stream, i, context):
    # <String anon_string17>
    if stream.startswith('nt', i):
        out = 'nt'
        i += 2
    else:
        out = Miss
    return out, i


def apos(stream, i, context):
    # <Seq apos>
    savei1 = i
    active1 = True
    if active1:
        # <LookBehind>
        savei2 = i
        i -= 1
        # <Call alphachar()>
        out, i = alphachar(stream, i, context)
        if out is not Miss and i == savei2:
            out = Empty
        else:
            out = Miss
            i = savei2
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in "'":
        active1 = False
        out = Miss
    if active1:
        # <String "'">
        if stream.startswith("'", i):
            out = "'"
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in 'sltnNTSL':
        active1 = False
        out = Miss
    if active1:
        # <Peek>
        savei3 = i
        # <Or>
        targets = None_fm17[None]
        if i < len(stream):
            targets = None_fm17.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        if out is not Miss:
            out = Empty
        i = savei3
        active1 = out is not Miss
    if active1:
        # <Do u"\u2019">
        out = u"\u2019"
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def anon_seq8(stream, i, context):
    # <Seq anon_seq8>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '(':
        active1 = False
        out = Miss
    if active1:
        # <String '(c)'>
        if stream.startswith('(c)', i):
            out = '(c)'
            i += 3
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do u"\u00a9">
        out = u"\u00a9"
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def anon_seq9(stream, i, context):
    # <Seq anon_seq9>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '(':
        active1 = False
        out = Miss
    if active1:
        # <String '(tm)'>
        if stream.startswith('(tm)', i):
            out = '(tm)'
            i += 4
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do u"\u2122">
        out = u"\u2122"
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def anon_seq10(stream, i, context):
    # <Seq anon_seq10>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '(':
        active1 = False
        out = Miss
    if active1:
        # <String '(r)'>
        if stream.startswith('(r)', i):
            out = '(r)'
            i += 3
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do u"\u00ae">
        out = u"\u00ae"
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def spaceorpunct(stream, i, context):
    # <Among spaceorpunct>
    if i < len(stream) and stream[i] in _charset9:
        out = stream[i]
        i += 1
    else:
        out = Miss
    return out, i


def symbols(stream, i, context):
    # <Seq symbols>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '(':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'c'>
        # <Or>
        targets = None_fm18[None]
        if i < len(stream):
            targets = None_fm18.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        if out is not Miss:
            context['c'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ' \t\r\n-;:\'",./?':
        active1 = False
        out = Miss
    if active1:
        # <Peek>
        savei2 = i
        # <Call spaceorpunct()>
        out, i = spaceorpunct(stream, i, context)
        if out is not Miss:
            out = Empty
        i = savei2
        active1 = out is not Miss
    if active1:
        # <Do c>
        out = eval(_do30, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_string18(stream, i, context):
    # <String anon_string18>
    if stream.startswith('---', i):
        out = '---'
        i += 3
    else:
        out = Miss
    return out, i


def anon_string19(stream, i, context):
    # <String anon_string19>
    if stream.startswith('--', i):
        out = '--'
        i += 2
    else:
        out = Miss
    return out, i


def dashes(stream, i, context):
    # <Seq dashes>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Not>
        # <LookBehind>
        savei2 = i
        i -= 1
        # <String '-'>
        if stream.startswith('-', i):
            out = '-'
            i += 1
        else:
            out = Miss
        if out is not Miss and i == savei2:
            out = Empty
        else:
            out = Miss
            i = savei2
        if out is Miss:
            out = Empty
        else:
            out = Miss
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '-':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'd'>
        # <Or>
        targets = None_fm19[None]
        if i < len(stream):
            targets = None_fm19.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        if out is not Miss:
            context['d'] = out
        active1 = out is not Miss
    if active1:
        # <Not>
        # <String '-'>
        if stream.startswith('-', i):
            out = '-'
            i += 1
        else:
            out = Miss
        if out is Miss:
            out = Empty
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do u"\u2014" if len(d) == 3 else u"\u2013">
        out = eval(_do31, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_seq11(stream, i, context):
    # <Seq anon_seq11>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '-':
        active1 = False
        out = Miss
    if active1:
        # <String '->'>
        if stream.startswith('->', i):
            out = '->'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do u"\u2192">
        out = u"\u2192"
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def anon_seq12(stream, i, context):
    # <Seq anon_seq12>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '<':
        active1 = False
        out = Miss
    if active1:
        # <String '<-'>
        if stream.startswith('<-', i):
            out = '<-'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do u"\u2190">
        out = u"\u2190"
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def anon_seq13(stream, i, context):
    # <Seq anon_seq13>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '<':
        active1 = False
        out = Miss
    if active1:
        # <String '<='>
        if stream.startswith('<=', i):
            out = '<='
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do u"\u2264">
        out = u"\u2264"
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def anon_seq14(stream, i, context):
    # <Seq anon_seq14>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '<':
        active1 = False
        out = Miss
    if active1:
        # <String '<=>'>
        if stream.startswith('<=>', i):
            out = '<=>'
            i += 3
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do u"\u21d4">
        out = u"\u21d4"
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def anon_seq15(stream, i, context):
    # <Seq anon_seq15>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '=':
        active1 = False
        out = Miss
    if active1:
        # <String '=>'>
        if stream.startswith('=>', i):
            out = '=>'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do u"\u2265">
        out = u"\u2265"
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def anon_peek1(stream, i, context):
    # <Peek anon_peek1>
    savei1 = i
    # <Call space()>
    out, i = space(stream, i, context)
    if out is not Miss:
        out = Empty
    i = savei1
    return out, i


def arrows(stream, i, context):
    # <Seq arrows>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '=-<':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'c'>
        # <Or>
        targets = None_fm20[None]
        if i < len(stream):
            targets = None_fm20.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        if out is not Miss:
            context['c'] = out
        active1 = out is not Miss
    if active1:
        # <Or>
        targets = None_fm21[None]
        if i < len(stream):
            targets = None_fm21.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do ' ' + c>
        out = eval(_do32, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def elipsis(stream, i, context):
    # <Seq elipsis>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '.':
        active1 = False
        out = Miss
    if active1:
        # <String '...'>
        if stream.startswith('...', i):
            out = '...'
            i += 3
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do u"\u2026">
        out = u"\u2026"
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def mult(stream, i, context):
    # <Seq mult>
    savei1 = i
    active1 = True
    if active1:
        # <LookBehind>
        savei2 = i
        i -= 1
        # <Call digit()>
        out, i = digit(stream, i, context)
        if out is not Miss and i == savei2:
            out = Empty
        else:
            out = Miss
            i = savei2
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in 'x':
        active1 = False
        out = Miss
    if active1:
        # <String 'x'>
        if stream.startswith('x', i):
            out = 'x'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Peek>
        savei3 = i
        # <Or>
        targets = None_fm22[None]
        if i < len(stream):
            targets = None_fm22.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        if out is not Miss:
            out = Empty
        i = savei3
        active1 = out is not Miss
    if active1:
        # <Do u"\u00d7">
        out = u"\u00d7"
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def typog(stream, i, context):
    # <Or typog>
    targets = typog_fm1[None]
    if i < len(stream):
        targets = typog_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def stylespans(stream, i, context):
    # <Or stylespans>
    targets = stylespans_fm1[None]
    if i < len(stream):
        targets = stylespans_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def supertitle(stream, i, context):
    # <Seq supertitle>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'tx'>
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            savei2 = i
            # <Seq>
            savei3 = i
            active2 = True
            if active2:
                # <Star>
                savei4 = i
                times1 = 0
                output2 = []
                while i <= len(stream):
                    previ1 = i
                    # <Call hspace()>
                    out, i = hspace(stream, i, context)
                    if out is Miss:
                        break
                    if i <= previ1:
                        if stream.startswith('\x03', i) or i == len(stream):
                            break
                        raise Exception
                    if out is not Empty:
                        output2.append(out)
                    times1 += 1
                if times1 >= 0:
                    out = output2
                else:
                    out = Miss
                    i = savei4
                active2 = out is not Miss
            if active2 and i < len(stream) and stream[i] not in '|':
                active2 = False
                out = Miss
            if active2:
                # <String '|>'>
                if stream.startswith('|>', i):
                    out = '|>'
                    i += 2
                else:
                    out = Miss
                active2 = out is not Miss
            if not active2:
                i = savei3
            i = savei2
            if out is Failure:
                out = Miss
                break
            elif out is not Miss:
                break
            savei2 = i
            out, i = stylespans(stream, i, context)
            if out is Miss:
                i = savei2 + 1
            elif out is Failure:
                out = Miss
                break
            elif i <= savei2:
                raise Exception
            else:
                if savei2 > lasti:
                    output1.append(stream[lasti:savei2])
                output1.append(out)
                lasti = i
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            context['tx'] = out
        active1 = out is not Miss
    if active1:
        # <Star>
        savei5 = i
        times2 = 0
        output3 = []
        while i <= len(stream):
            previ2 = i
            # <Call hspace()>
            out, i = hspace(stream, i, context)
            if out is Miss:
                break
            if i <= previ2:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output3.append(out)
            times2 += 1
        if times2 >= 0:
            out = output3
        else:
            out = Miss
            i = savei5
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '|':
        active1 = False
        out = Miss
    if active1:
        # <String '|>'>
        if stream.startswith('|>', i):
            out = '|>'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do w.span("supertitle", tx)>
        out = eval(_do33, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_seq16(stream, i, context):
    # <Seq anon_seq16>
    savei1 = i
    active1 = True
    if active1:
        # <Star>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Call hspace()>
            out, i = hspace(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 0:
            out = output1
        else:
            out = Miss
            i = savei2
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '=':
        active1 = False
        out = Miss
    if active1:
        # <String '='>
        if stream.startswith('=', i):
            out = '='
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def anon_string20(stream, i, context):
    # <String anon_string20>
    if stream.startswith('<|', i):
        out = '<|'
        i += 2
    else:
        out = Miss
    return out, i


def subtitle(stream, i, context):
    # <Seq subtitle>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '<':
        active1 = False
        out = Miss
    if active1:
        # <String '<|'>
        if stream.startswith('<|', i):
            out = '<|'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Star>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Call hspace()>
            out, i = hspace(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 0:
            out = output1
        else:
            out = Miss
            i = savei2
        active1 = out is not Miss
    if active1:
        # <Bind 'tx'>
        # <Mixed>
        output2 = []
        lasti = i
        while i < len(stream):
            savei3 = i
            # <Seq>
            savei4 = i
            active2 = True
            if active2:
                # <Star>
                savei5 = i
                times2 = 0
                output3 = []
                while i <= len(stream):
                    previ2 = i
                    # <Call hspace()>
                    out, i = hspace(stream, i, context)
                    if out is Miss:
                        break
                    if i <= previ2:
                        if stream.startswith('\x03', i) or i == len(stream):
                            break
                        raise Exception
                    if out is not Empty:
                        output3.append(out)
                    times2 += 1
                if times2 >= 0:
                    out = output3
                else:
                    out = Miss
                    i = savei5
                active2 = out is not Miss
            if active2 and i < len(stream) and stream[i] not in '=':
                active2 = False
                out = Miss
            if active2:
                # <String '='>
                if stream.startswith('=', i):
                    out = '='
                    i += 1
                else:
                    out = Miss
                active2 = out is not Miss
            if not active2:
                i = savei4
            i = savei3
            if out is Failure:
                out = Miss
                break
            elif out is not Miss:
                break
            savei3 = i
            out, i = stylespans(stream, i, context)
            if out is Miss:
                i = savei3 + 1
            elif out is Failure:
                out = Miss
                break
            elif i <= savei3:
                raise Exception
            else:
                if savei3 > lasti:
                    output2.append(stream[lasti:savei3])
                output2.append(out)
                lasti = i
        if i > lasti:
            output2.append(stream[lasti:i])
        out = output2
        if out is not Miss:
            context['tx'] = out
        active1 = out is not Miss
    if active1:
        # <Do w.span("subtitle", tx)>
        out = eval(_do34, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_string21(stream, i, context):
    # <String anon_string21>
    if stream.startswith('\n', i):
        out = '\n'
        i += 1
    else:
        out = Miss
    return out, i


def title(stream, i, context):
    # <Seq title>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'indent'>
        out, i = lstart(stream, i, context)
        if out is not Miss:
            context['indent'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '=':
        active1 = False
        out = Miss
    if active1:
        # <String '='>
        if stream.startswith('=', i):
            out = '='
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Star>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Call hspace()>
            out, i = hspace(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 0:
            out = output1
        else:
            out = Miss
            i = savei2
        active1 = out is not Miss
    if active1:
        # <Bind 'supt'>
        # <Opt>
        # <Call supertitle()>
        out, i = supertitle(stream, i, context)
        if out is Miss:
            out = []
        else:
            out = [out]
        if out is not Miss:
            context['supt'] = out
        active1 = out is not Miss
    if active1:
        # <Bind 'tx'>
        # <Mixed>
        output2 = []
        lasti = i
        while i < len(stream):
            savei3 = i
            # <Or>
            targets = None_fm23[None]
            if i < len(stream):
                targets = None_fm23.get(stream[i], targets)
            if targets:
                for rule in targets:
                    out, new = rule(stream, i, context)
                    if out is not Miss:
                        i = new
                        break
                else:
                    out = Miss
            else:
                out = Miss
            i = savei3
            if out is Failure:
                out = Miss
                break
            elif out is not Miss:
                break
            savei3 = i
            out, i = stylespans(stream, i, context)
            if out is Miss:
                i = savei3 + 1
            elif out is Failure:
                out = Miss
                break
            elif i <= savei3:
                raise Exception
            else:
                if savei3 > lasti:
                    output2.append(stream[lasti:savei3])
                output2.append(out)
                lasti = i
        if i > lasti:
            output2.append(stream[lasti:i])
        out = output2
        if out is not Miss:
            context['tx'] = out
        active1 = out is not Miss
    if active1:
        # <Bind 'subt'>
        # <Opt>
        # <Call subtitle()>
        out, i = subtitle(stream, i, context)
        if out is Miss:
            out = []
        else:
            out = [out]
        if out is not Miss:
            context['subt'] = out
        active1 = out is not Miss
    if active1:
        # <Star>
        savei4 = i
        times2 = 0
        output3 = []
        while i <= len(stream):
            previ2 = i
            # <Call hspace()>
            out, i = hspace(stream, i, context)
            if out is Miss:
                break
            if i <= previ2:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output3.append(out)
            times2 += 1
        if times2 >= 0:
            out = output3
        else:
            out = Miss
            i = savei4
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '=':
        active1 = False
        out = Miss
    if active1:
        # <String '='>
        if stream.startswith('=', i):
            out = '='
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Star>
        savei5 = i
        times3 = 0
        output4 = []
        while i <= len(stream):
            previ3 = i
            # <Call hspace()>
            out, i = hspace(stream, i, context)
            if out is Miss:
                break
            if i <= previ3:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output4.append(out)
            times3 += 1
        if times3 >= 0:
            out = output4
        else:
            out = Miss
            i = savei5
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '\x03\n':
        active1 = False
        out = Miss
    if active1:
        # <Or>
        targets = None_fm24[None]
        if i < len(stream):
            targets = None_fm24.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do w.block("title", indent, supt + tx + subt, level=0)>
        out = eval(_do35, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def heading_tag(stream, i, context):
    # <Seq heading_tag>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Star>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Call hspace()>
            out, i = hspace(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 0:
            out = output1
        else:
            out = Miss
            i = savei2
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '(':
        active1 = False
        out = Miss
    if active1:
        # <String '('>
        if stream.startswith('(', i):
            out = '('
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'tag'>
        # <Take>
        savei3 = i
        # <Plus>
        savei4 = i
        times2 = 0
        output2 = []
        while i <= len(stream):
            previ2 = i
            # <Seq>
            savei5 = i
            active2 = True
            if active2:
                # <Not>
                # <String ')'>
                if stream.startswith(')', i):
                    out = ')'
                    i += 1
                else:
                    out = Miss
                if out is Miss:
                    out = Empty
                else:
                    out = Miss
                active2 = out is not Miss
            if active2:
                # <Call2 r.any_()>
                out, i = r.any_(stream, i, context)
                active2 = out is not Miss
            if not active2:
                i = savei5
            if out is Miss:
                break
            if i <= previ2:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output2.append(out)
            times2 += 1
        if times2 >= 1:
            out = output2
        else:
            out = Miss
            i = savei4
        if out is not Miss:
            out = stream[savei3:i]
        if out is not Miss:
            context['tag'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ')':
        active1 = False
        out = Miss
    if active1:
        # <String ')'>
        if stream.startswith(')', i):
            out = ')'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do tag>
        out = eval(_do36, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_string22(stream, i, context):
    # <String anon_string22>
    if stream.startswith('\n', i):
        out = '\n'
        i += 1
    else:
        out = Miss
    return out, i


def heading(stream, i, context):
    # <Seq heading>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'indent'>
        out, i = lstart(stream, i, context)
        if out is not Miss:
            context['indent'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '=':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'eqs'>
        # <Repeat>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <String '='>
            if stream.startswith('=', i):
                out = '='
                i += 1
            else:
                out = Miss
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 2:
            out = output1
        else:
            out = Miss
            i = savei2
        if out is not Miss:
            context['eqs'] = out
        active1 = out is not Miss
    if active1:
        # <If len(eqs) > 1>
        out = Empty if eval(_if4, context.namespace, context) else Miss
        active1 = out is not Miss
    if active1:
        # <Star>
        savei3 = i
        times2 = 0
        output2 = []
        while i <= len(stream):
            previ2 = i
            # <Call hspace()>
            out, i = hspace(stream, i, context)
            if out is Miss:
                break
            if i <= previ2:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output2.append(out)
            times2 += 1
        if times2 >= 0:
            out = output2
        else:
            out = Miss
            i = savei3
        active1 = out is not Miss
    if active1:
        # <Bind 'tx'>
        # <Mixed>
        output3 = []
        lasti = i
        while i < len(stream):
            savei4 = i
            # <Seq>
            savei5 = i
            active2 = True
            if active2:
                # <Star>
                savei6 = i
                times3 = 0
                output4 = []
                while i <= len(stream):
                    previ3 = i
                    # <Call hspace()>
                    out, i = hspace(stream, i, context)
                    if out is Miss:
                        break
                    if i <= previ3:
                        if stream.startswith('\x03', i) or i == len(stream):
                            break
                        raise Exception
                    if out is not Empty:
                        output4.append(out)
                    times3 += 1
                if times3 >= 0:
                    out = output4
                else:
                    out = Miss
                    i = savei6
                active2 = out is not Miss
            if active2 and i < len(stream) and stream[i] not in '=':
                active2 = False
                out = Miss
            if active2:
                # <String '='>
                if stream.startswith('=', i):
                    out = '='
                    i += 1
                else:
                    out = Miss
                active2 = out is not Miss
            if not active2:
                i = savei5
            i = savei4
            if out is Failure:
                out = Miss
                break
            elif out is not Miss:
                break
            savei4 = i
            out, i = stylespans(stream, i, context)
            if out is Miss:
                i = savei4 + 1
            elif out is Failure:
                out = Miss
                break
            elif i <= savei4:
                raise Exception
            else:
                if savei4 > lasti:
                    output3.append(stream[lasti:savei4])
                output3.append(out)
                lasti = i
        if i > lasti:
            output3.append(stream[lasti:i])
        out = output3
        if out is not Miss:
            context['tx'] = out
        active1 = out is not Miss
    if active1:
        # <Star>
        savei7 = i
        times4 = 0
        output5 = []
        while i <= len(stream):
            previ4 = i
            # <Call hspace()>
            out, i = hspace(stream, i, context)
            if out is Miss:
                break
            if i <= previ4:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output5.append(out)
            times4 += 1
        if times4 >= 0:
            out = output5
        else:
            out = Miss
            i = savei7
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '=':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'eqs2'>
        # <Repeat>
        savei8 = i
        times5 = 0
        output6 = []
        while i <= len(stream):
            previ5 = i
            # <String '='>
            if stream.startswith('=', i):
                out = '='
                i += 1
            else:
                out = Miss
            if out is Miss:
                break
            if i <= previ5:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output6.append(out)
            times5 += 1
        if times5 >= 2:
            out = output6
        else:
            out = Miss
            i = savei8
        if out is not Miss:
            context['eqs2'] = out
        active1 = out is not Miss
    if active1:
        # <If eqs == eqs2>
        out = Empty if eval(_if5, context.namespace, context) else Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'tag'>
        # <Opt>
        # <Call heading_tag()>
        out, i = heading_tag(stream, i, context)
        if out is Miss:
            out = []
        else:
            out = [out]
        if out is not Miss:
            context['tag'] = out
        active1 = out is not Miss
    if active1:
        # <Star>
        savei9 = i
        times6 = 0
        output7 = []
        while i <= len(stream):
            previ6 = i
            # <Call hspace()>
            out, i = hspace(stream, i, context)
            if out is Miss:
                break
            if i <= previ6:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output7.append(out)
            times6 += 1
        if times6 >= 0:
            out = output7
        else:
            out = Miss
            i = savei9
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '\x03\n':
        active1 = False
        out = Miss
    if active1:
        # <Or>
        targets = None_fm25[None]
        if i < len(stream):
            targets = None_fm25.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do w.block("h", indent, tx, level=len(eqs), id=tag[0] if tag else None, container=True)>
        out = eval(_do37, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_string23(stream, i, context):
    # <String anon_string23>
    if stream.startswith('"""', i):
        out = '"""'
        i += 3
    else:
        out = Miss
    return out, i


def summary(stream, i, context):
    # <Seq summary>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'indent'>
        out, i = lstart(stream, i, context)
        if out is not Miss:
            context['indent'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '"':
        active1 = False
        out = Miss
    if active1:
        # <String '"""'>
        if stream.startswith('"""', i):
            out = '"""'
            i += 3
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'tx'>
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            if i == len(stream) or stream[i] in '\x03\n"':
                savei2 = i
                # <Or>
                targets = None_fm26[None]
                if i < len(stream):
                    targets = None_fm26.get(stream[i], targets)
                if targets:
                    for rule in targets:
                        out, new = rule(stream, i, context)
                        if out is not Miss:
                            i = new
                            break
                    else:
                        out = Miss
                else:
                    out = Miss
                i = savei2
                if out is Failure:
                    out = Miss
                    break
                elif out is not Miss:
                    break
            if i == len(stream) or stream[i] in ' x=&<.[*/`%+"_(\'-':
                savei2 = i
                out, i = spans(stream, i, context)
                if out is Miss:
                    i = savei2 + 1
                elif out is Failure:
                    out = Miss
                    break
                elif i <= savei2:
                    raise Exception
                else:
                    if savei2 > lasti:
                        output1.append(stream[lasti:savei2])
                    output1.append(out)
                    lasti = i
            else:
                i += 1
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            context['tx'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '"':
        active1 = False
        out = Miss
    if active1:
        # <String '"""'>
        if stream.startswith('"""', i):
            out = '"""'
            i += 3
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Star>
        savei3 = i
        times1 = 0
        output2 = []
        while i <= len(stream):
            previ1 = i
            # <Call hspace()>
            out, i = hspace(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output2.append(out)
            times1 += 1
        if times1 >= 0:
            out = output2
        else:
            out = Miss
            i = savei3
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '\x03\n':
        active1 = False
        out = Miss
    if active1:
        out, i = break_(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Do w.block("summary", indent, tx)>
        out = eval(_do38, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def divider(stream, i, context):
    # <Seq divider>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'indent'>
        out, i = lstart(stream, i, context)
        if out is not Miss:
            context['indent'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '~':
        active1 = False
        out = Miss
    if active1:
        # <String '~~'>
        if stream.startswith('~~', i):
            out = '~~'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Star>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Call hspace()>
            out, i = hspace(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 0:
            out = output1
        else:
            out = Miss
            i = savei2
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '\x03\n':
        active1 = False
        out = Miss
    if active1:
        out, i = lineend(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Do w.block("divider", indent, None)>
        out = eval(_do39, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def sepend(stream, i, context):
    # <Seq sepend>
    savei1 = i
    active1 = True
    if active1:
        # <Star>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <String '~'>
            if stream.startswith('~', i):
                out = '~'
                i += 1
            else:
                out = Miss
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 0:
            out = output1
        else:
            out = Miss
            i = savei2
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '\x03\n':
        active1 = False
        out = Miss
    if active1:
        out, i = lineend(stream, i, context)
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def sep(stream, i, context):
    # <Seq sep>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'indent'>
        out, i = lstart(stream, i, context)
        if out is not Miss:
            context['indent'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '~':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'line'>
        # <Repeat>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <String '~'>
            if stream.startswith('~', i):
                out = '~'
                i += 1
            else:
                out = Miss
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 2:
            out = output1
        else:
            out = Miss
            i = savei2
        if out is not Miss:
            context['line'] = out
        active1 = out is not Miss
    if active1:
        # <Bind 'tx'>
        # <Mixed>
        output2 = []
        lasti = i
        while i < len(stream):
            savei3 = i
            out, i = sepend(stream, i, context)
            i = savei3
            if out is Failure:
                out = Miss
                break
            elif out is not Miss:
                break
            savei3 = i
            out, i = stylespans(stream, i, context)
            if out is Miss:
                i = savei3 + 1
            elif out is Failure:
                out = Miss
                break
            elif i <= savei3:
                raise Exception
            else:
                if savei3 > lasti:
                    output2.append(stream[lasti:savei3])
                output2.append(out)
                lasti = i
        if i > lasti:
            output2.append(stream[lasti:i])
        out = output2
        if out is not Miss:
            context['tx'] = out
        active1 = out is not Miss
    if active1:
        out, i = sepend(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Do w.block("sep", indent, tx, level=len(line))>
        out = eval(_do40, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_seq18(stream, i, context):
    # <Seq anon_seq18>
    savei1 = i
    active1 = True
    if active1:
        # <Opt>
        # <Call ws()>
        out, i = ws(stream, i, context)
        if out is Miss:
            out = []
        else:
            out = [out]
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '\x03':
        active1 = False
        out = Miss
    if active1:
        out, i = streamend(stream, i, context)
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def anon_seq17(stream, i, context):
    # <Seq anon_seq17>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '\n':
        active1 = False
        out = Miss
    if active1:
        # <String '\n'>
        if stream.startswith('\n', i):
            out = '\n'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Or>
        targets = None_fm27[None]
        if i < len(stream):
            targets = None_fm27.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def anon_seq19(stream, i, context):
    # <Seq anon_seq19>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '\n':
        active1 = False
        out = Miss
    if active1:
        # <String '\n'>
        if stream.startswith('\n', i):
            out = '\n'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Peek>
        savei2 = i
        # <Seq>
        savei3 = i
        savectx2 = context
        context = context.push()
        active2 = True
        if active2:
            # <Bind 'nextin'>
            # <Call lstart()>
            out, i = lstart(stream, i, context)
            if out is not Miss:
                context['nextin'] = out
            active2 = out is not Miss
        if active2:
            # <If nextin < indent or nextin > indent + bwidth>
            out = Empty if eval(_if6, context.namespace, context) else Miss
            active2 = out is not Miss
        context = savectx2
        if not active2:
            i = savei3
        if out is not Miss:
            out = Empty
        i = savei2
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def anon_seq20(stream, i, context):
    # <Seq anon_seq20>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '\n':
        active1 = False
        out = Miss
    if active1:
        # <String '\n'>
        if stream.startswith('\n', i):
            out = '\n'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Peek>
        savei2 = i
        # <Call starters()>
        out, i = starters(stream, i, context)
        if out is not Miss:
            out = Empty
        i = savei2
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def bullet_ending(stream, i, context):
    # <Or bullet_ending>
    targets = bullet_ending_fm1[None]
    if i < len(stream):
        targets = bullet_ending_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def bullet_body(stream, i, context):
    # <Seq bullet_body>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'tx'>
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            if i == len(stream) or stream[i] in '\x03\n':
                savei2 = i
                out, i = bullet_ending(stream, i, context)
                i = savei2
                if out is Failure:
                    out = Miss
                    break
                elif out is not Miss:
                    break
            if i == len(stream) or stream[i] in ' x=&<.[*/`%+"_(\'-':
                savei2 = i
                out, i = spans(stream, i, context)
                if out is Miss:
                    i = savei2 + 1
                elif out is Failure:
                    out = Miss
                    break
                elif i <= savei2:
                    raise Exception
                else:
                    if savei2 > lasti:
                        output1.append(stream[lasti:savei2])
                    output1.append(out)
                    lasti = i
            else:
                i += 1
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            context['tx'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '\x03\n':
        active1 = False
        out = Miss
    if active1:
        out, i = bullet_ending(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Do tx>
        out = eval(_do41, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def bullet(stream, i, context):
    # <Seq bullet>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'indent'>
        out, i = lstart(stream, i, context)
        if out is not Miss:
            context['indent'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '-*':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'bwidth'>
        out, i = bullet_start(stream, i, context)
        if out is not Miss:
            context['bwidth'] = out
        active1 = out is not Miss
    if active1:
        # <Bind 'tx'>
        out, i = bullet_body(stream, i, context)
        if out is not Miss:
            context['tx'] = out
        active1 = out is not Miss
    if active1:
        # <Do w.block('bullet', indent, tx, blevel=indent+bwidth)>
        out = eval(_do42, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def ord(stream, i, context):
    # <Seq ord>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'indent'>
        out, i = lstart(stream, i, context)
        if out is not Miss:
            context['indent'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '#':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'bwidth'>
        out, i = ord_start(stream, i, context)
        if out is not Miss:
            context['bwidth'] = out
        active1 = out is not Miss
    if active1:
        # <Bind 'tx'>
        out, i = bullet_body(stream, i, context)
        if out is not Miss:
            context['tx'] = out
        active1 = out is not Miss
    if active1:
        # <Do w.block('ord', indent, tx, blevel=indent+bwidth)>
        out = eval(_do43, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def itemend(stream, i, context):
    # <Seq itemend>
    savei1 = i
    active1 = True
    if active1:
        # <Opt>
        # <String ':'>
        if stream.startswith(':', i):
            out = ':'
            i += 1
        else:
            out = Miss
        if out is Miss:
            out = []
        else:
            out = [out]
        active1 = out is not Miss
    if active1:
        # <Star>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Call hspace()>
            out, i = hspace(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 0:
            out = output1
        else:
            out = Miss
            i = savei2
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '\x03\n':
        active1 = False
        out = Miss
    if active1:
        out, i = break_(stream, i, context)
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def item(stream, i, context):
    # <Seq item>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'indent'>
        out, i = lstart(stream, i, context)
        if out is not Miss:
            context['indent'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ':':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'it'>
        out, i = itemtype(stream, i, context)
        if out is not Miss:
            context['it'] = out
        active1 = out is not Miss
    if active1:
        # <Bind 'tx'>
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            savei2 = i
            out, i = itemend(stream, i, context)
            i = savei2
            if out is Failure:
                out = Miss
                break
            elif out is not Miss:
                break
            if i == len(stream) or stream[i] in ' x=&<.[*/`%+"_(\'-':
                savei2 = i
                out, i = spans(stream, i, context)
                if out is Miss:
                    i = savei2 + 1
                elif out is Failure:
                    out = Miss
                    break
                elif i <= savei2:
                    raise Exception
                else:
                    if savei2 > lasti:
                        output1.append(stream[lasti:savei2])
                    output1.append(out)
                    lasti = i
            else:
                i += 1
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            context['tx'] = out
        active1 = out is not Miss
    if active1:
        out, i = itemend(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Do w.block(it[0] or "item", indent, tx, role="item", ext=it[1])>
        out = eval(_do44, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_string24(stream, i, context):
    # <String anon_string24>
    if stream.startswith('NOTE', i):
        out = 'NOTE'
        i += 4
    else:
        out = Miss
    return out, i


def anon_string25(stream, i, context):
    # <String anon_string25>
    if stream.startswith('TIP', i):
        out = 'TIP'
        i += 3
    else:
        out = Miss
    return out, i


def anon_string26(stream, i, context):
    # <String anon_string26>
    if stream.startswith('WARNING', i):
        out = 'WARNING'
        i += 7
    else:
        out = Miss
    return out, i


def indentinc(stream, i, context):
    # <Seq indentinc>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Opt>
        # <Call emptylines()>
        out, i = emptylines(stream, i, context)
        if out is Miss:
            out = []
        else:
            out = [out]
        active1 = out is not Miss
    if active1:
        # <Bind 'nextin'>
        out, i = lstart(stream, i, context)
        if out is not Miss:
            context['nextin'] = out
        active1 = out is not Miss
    if active1:
        # <If nextin > indent>
        out = Empty if eval(_if7, context.namespace, context) else Miss
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def note(stream, i, context):
    # <Seq note>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'indent'>
        out, i = lstart(stream, i, context)
        if out is not Miss:
            context['indent'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in 'WNT':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'it'>
        # <Or>
        targets = None_fm28[None]
        if i < len(stream):
            targets = None_fm28.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        if out is not Miss:
            context['it'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ':':
        active1 = False
        out = Miss
    if active1:
        # <String ':'>
        if stream.startswith(':', i):
            out = ':'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'tx'>
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            if i == len(stream) or stream[i] in '\n':
                savei2 = i
                # <String '\n'>
                if stream.startswith('\n', i):
                    out = '\n'
                    i += 1
                else:
                    out = Miss
                i = savei2
                if out is Failure:
                    out = Miss
                    break
                elif out is not Miss:
                    break
            savei2 = i
            out, i = stylespans(stream, i, context)
            if out is Miss:
                i = savei2 + 1
            elif out is Failure:
                out = Miss
                break
            elif i <= savei2:
                raise Exception
            else:
                if savei2 > lasti:
                    output1.append(stream[lasti:savei2])
                output1.append(out)
                lasti = i
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            context['tx'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '\n':
        active1 = False
        out = Miss
    if active1:
        # <String '\n'>
        if stream.startswith('\n', i):
            out = '\n'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Peek>
        savei3 = i
        # <Call indentinc()>
        out, i = indentinc(stream, i, context)
        if out is not Miss:
            out = Empty
        i = savei3
        active1 = out is not Miss
    if active1:
        # <Do w.block(it.lower(), indent, tx, role="item")>
        out = eval(_do45, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def property(stream, i, context):
    # <Seq property>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'indent'>
        out, i = lstart(stream, i, context)
        if out is not Miss:
            context['indent'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '#':
        active1 = False
        out = Miss
    if active1:
        # <String '#'>
        if stream.startswith('#', i):
            out = '#'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'k'>
        # <Take>
        savei2 = i
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            if i == len(stream) or stream[i] in ':\n ':
                savei3 = i
                # <Among ':\n '>
                if i < len(stream) and stream[i] in _charset10:
                    out = stream[i]
                    i += 1
                else:
                    out = Miss
                i = savei3
                if out is Failure:
                    out = Miss
                    break
                elif out is not Miss:
                    break
            i += 1
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            out = stream[savei2:i]
        if out is not Miss:
            context['k'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in ':':
        active1 = False
        out = Miss
    if active1:
        # <String ':'>
        if stream.startswith(':', i):
            out = ':'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Star>
        savei4 = i
        times1 = 0
        output2 = []
        while i <= len(stream):
            previ1 = i
            # <Call hspace()>
            out, i = hspace(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output2.append(out)
            times1 += 1
        if times1 >= 0:
            out = output2
        else:
            out = Miss
            i = savei4
        active1 = out is not Miss
    if active1:
        # <Bind 'v'>
        # <Take>
        savei5 = i
        # <Mixed>
        output3 = []
        lasti = i
        while i < len(stream):
            if i == len(stream) or stream[i] in '\x03\n':
                savei6 = i
                out, i = lineend(stream, i, context)
                i = savei6
                if out is Failure:
                    out = Miss
                    break
                elif out is not Miss:
                    break
            i += 1
        if i > lasti:
            output3.append(stream[lasti:i])
        out = output3
        if out is not Miss:
            out = stream[savei5:i]
        if out is not Miss:
            context['v'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '\x03\n':
        active1 = False
        out = Miss
    if active1:
        out, i = lineend(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Bind 'extras'>
        # <Star>
        savei7 = i
        times2 = 0
        output4 = []
        while i <= len(stream):
            previ2 = i
            # <Seq>
            savei8 = i
            savectx2 = context
            context = context.push()
            active2 = True
            if active2:
                # <Peek>
                savei9 = i
                # <Seq>
                savei10 = i
                savectx3 = context
                context = context.push()
                active3 = True
                if active3:
                    # <Bind 'nextin'>
                    # <Call lstart()>
                    out, i = lstart(stream, i, context)
                    if out is not Miss:
                        context['nextin'] = out
                    active3 = out is not Miss
                if active3:
                    # <If nextin > indent>
                    out = Empty if eval(_if7, context.namespace, context) else Miss
                    active3 = out is not Miss
                context = savectx3
                if not active3:
                    i = savei10
                if out is not Miss:
                    out = Empty
                i = savei9
                active2 = out is not Miss
            if active2:
                # <Bind 'line'>
                # <Regex '[^\\n]*'>
                match1 = _regex8.match(stream, i)
                if match1:
                    out = match1.group(0)
                    i = match1.end()
                    context.update(match1.groupdict())
                else:
                    out = Miss
                if out is not Miss:
                    context['line'] = out
                active2 = out is not Miss
            if active2:
                # <If line.strip()>
                out = Empty if eval(_if8, context.namespace, context) else Miss
                active2 = out is not Miss
            if active2 and i < len(stream) and stream[i] not in '\x03\n':
                active2 = False
                out = Miss
            if active2:
                # <Call2 r.lineend()>
                out, i = r.lineend(stream, i, context)
                active2 = out is not Miss
            if active2:
                # <Do line>
                out = eval(_do46, globals(), context)
                active2 = out is not Miss
            context = savectx2
            if not active2:
                i = savei8
            if out is Miss:
                break
            if i <= previ2:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output4.append(out)
            times2 += 1
        if times2 >= 0:
            out = output4
        else:
            out = Miss
            i = savei7
        if out is not Miss:
            context['extras'] = out
        active1 = out is not Miss
    if active1:
        # <Opt>
        # <Call emptylines()>
        out, i = emptylines(stream, i, context)
        if out is Miss:
            out = []
        else:
            out = [out]
        active1 = out is not Miss
    if active1:
        # <Do w.block("prop", indent, None, name=k, value=v + "".join(extras))>
        out = eval(_do47, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def pxml(stream, i, context):
    # <Seq pxml>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'indent'>
        out, i = lstart(stream, i, context)
        if out is not Miss:
            context['indent'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in 'FDoMXTSId_KAUsbjr4OmavRY0Bz16PkZnpgNy2eG53HQCWhiqx78ltEJVw9ucLf':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'n'>
        out, i = xname(stream, i, context)
        if out is not Miss:
            context['n'] = out
        active1 = out is not Miss
    if active1:
        # <Bind 'alist'>
        out, i = attrlist(stream, i, context)
        if out is not Miss:
            context['alist'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '>':
        active1 = False
        out = Miss
    if active1:
        # <String '>>'>
        if stream.startswith('>>', i):
            out = '>>'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Bind 'tx'>
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            if i == len(stream) or stream[i] in '\x03\n':
                savei2 = i
                out, i = lineend(stream, i, context)
                i = savei2
                if out is Failure:
                    out = Miss
                    break
                elif out is not Miss:
                    break
            if i == len(stream) or stream[i] in ' x=&<.[*/`%+"_(\'-':
                savei2 = i
                out, i = spans(stream, i, context)
                if out is Miss:
                    i = savei2 + 1
                elif out is Failure:
                    out = Miss
                    break
                elif i <= savei2:
                    raise Exception
                else:
                    if savei2 > lasti:
                        output1.append(stream[lasti:savei2])
                    output1.append(out)
                    lasti = i
            else:
                i += 1
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            context['tx'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '\x03\n':
        active1 = False
        out = Miss
    if active1:
        out, i = lineend(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Do w.block("pxml", indent, tx, tag=n, attrs=alist)>
        out = eval(_do48, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_string27(stream, i, context):
    # <String anon_string27>
    if stream.startswith('\n', i):
        out = '\n'
        i += 1
    else:
        out = Miss
    return out, i


def section(stream, i, context):
    # <Seq section>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Opt>
        # <Call emptylines()>
        out, i = emptylines(stream, i, context)
        if out is Miss:
            out = []
        else:
            out = [out]
        active1 = out is not Miss
    if active1:
        # <Bind 'indent'>
        out, i = lstart(stream, i, context)
        if out is not Miss:
            context['indent'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '@':
        active1 = False
        out = Miss
    if active1:
        # <String '@'>
        if stream.startswith('@', i):
            out = '@'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in 'FDoMXTSId_KAUsbjr4OmavRY0Bz16PkZnpgNy2eG53HQCWhiqx78ltEJVw9ucLf':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'n'>
        out, i = identifier(stream, i, context)
        if out is not Miss:
            context['n'] = out
        active1 = out is not Miss
    if active1:
        # <Star>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Call hspace()>
            out, i = hspace(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 0:
            out = output1
        else:
            out = Miss
            i = savei2
        active1 = out is not Miss
    if active1:
        # <Bind 'tx'>
        # <Mixed>
        output2 = []
        lasti = i
        while i < len(stream):
            if i == len(stream) or stream[i] in '\x03\n':
                savei3 = i
                out, i = lineend(stream, i, context)
                i = savei3
                if out is Failure:
                    out = Miss
                    break
                elif out is not Miss:
                    break
            savei3 = i
            out, i = stylespans(stream, i, context)
            if out is Miss:
                i = savei3 + 1
            elif out is Failure:
                out = Miss
                break
            elif i <= savei3:
                raise Exception
            else:
                if savei3 > lasti:
                    output2.append(stream[lasti:savei3])
                output2.append(out)
                lasti = i
        if i > lasti:
            output2.append(stream[lasti:i])
        out = output2
        if out is not Miss:
            context['tx'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '\x03\n':
        active1 = False
        out = Miss
    if active1:
        # <Or>
        targets = None_fm29[None]
        if i < len(stream):
            targets = None_fm29.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do w.block(n + "_section", indent, tx, level=1, role="section", id=n, container=True)>
        out = eval(_do49, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def anon_seq21(stream, i, context):
    # <Seq anon_seq21>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '\x03\n':
        active1 = False
        out = Miss
    if active1:
        out, i = break_(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Do ("para", None)>
        out = ("para", None)
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def anon_seq22(stream, i, context):
    # <Seq anon_seq22>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in ':':
        active1 = False
        out = Miss
    if active1:
        # <String ':'>
        if stream.startswith(':', i):
            out = ':'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Star>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Call hspace()>
            out, i = hspace(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 0:
            out = output1
        else:
            out = Miss
            i = savei2
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '\n':
        active1 = False
        out = Miss
    if active1:
        # <String '\n'>
        if stream.startswith('\n', i):
            out = '\n'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Peek>
        savei3 = i
        # <Call indentinc()>
        out, i = indentinc(stream, i, context)
        if out is not Miss:
            out = Empty
        i = savei3
        active1 = out is not Miss
    if active1:
        # <Opt>
        # <Call emptylines()>
        out, i = emptylines(stream, i, context)
        if out is Miss:
            out = []
        else:
            out = [out]
        active1 = out is not Miss
    if active1:
        # <Do ("dt", None)>
        out = ("dt", None)
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def anon_seq23(stream, i, context):
    # <Seq anon_seq23>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '|':
        active1 = False
        out = Miss
    if active1:
        # <String '||'>
        if stream.startswith('||', i):
            out = '||'
            i += 2
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Star>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Call hspace()>
            out, i = hspace(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 0:
            out = output1
        else:
            out = Miss
            i = savei2
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '\n':
        active1 = False
        out = Miss
    if active1:
        # <String '\n'>
        if stream.startswith('\n', i):
            out = '\n'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Do ("cell", "th")>
        out = ("cell", "th")
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def anon_seq24(stream, i, context):
    # <Seq anon_seq24>
    savei1 = i
    active1 = True
    if active1 and i < len(stream) and stream[i] not in '|':
        active1 = False
        out = Miss
    if active1:
        # <String '|'>
        if stream.startswith('|', i):
            out = '|'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Star>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Call hspace()>
            out, i = hspace(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 0:
            out = output1
        else:
            out = Miss
            i = savei2
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '\n':
        active1 = False
        out = Miss
    if active1:
        # <String '\n'>
        if stream.startswith('\n', i):
            out = '\n'
            i += 1
        else:
            out = Miss
        active1 = out is not Miss
    if active1:
        # <Peek>
        savei3 = i
        # <Call indentinc()>
        out, i = indentinc(stream, i, context)
        if out is not Miss:
            out = Empty
        i = savei3
        active1 = out is not Miss
    if active1:
        # <Do ("cell", "td")>
        out = ("cell", "td")
        active1 = out is not Miss
    if not active1:
        i = savei1
    return out, i


def para_ending(stream, i, context):
    # <Or para_ending>
    targets = para_ending_fm1[None]
    if i < len(stream):
        targets = para_ending_fm1.get(stream[i], targets)
    if targets:
        for rule in targets:
            out, new = rule(stream, i, context)
            if out is not Miss:
                i = new
                break
        else:
            out = Miss
    else:
        out = Miss
    return out, i


def para(stream, i, context):
    # <Seq para>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'indent'>
        out, i = lstart(stream, i, context)
        if out is not Miss:
            context['indent'] = out
        active1 = out is not Miss
    if active1:
        # <Bind 'tx'>
        # <Mixed>
        output1 = []
        lasti = i
        while i < len(stream):
            if i == len(stream) or stream[i] in '\n:|\x03':
                savei2 = i
                out, i = para_ending(stream, i, context)
                i = savei2
                if out is Failure:
                    out = Miss
                    break
                elif out is not Miss:
                    break
            if i == len(stream) or stream[i] in ' x=&<.[*/`%+"_(\'-':
                savei2 = i
                out, i = spans(stream, i, context)
                if out is Miss:
                    i = savei2 + 1
                elif out is Failure:
                    out = Miss
                    break
                elif i <= savei2:
                    raise Exception
                else:
                    if savei2 > lasti:
                        output1.append(stream[lasti:savei2])
                    output1.append(out)
                    lasti = i
            else:
                i += 1
        if i > lasti:
            output1.append(stream[lasti:i])
        out = output1
        if out is not Miss:
            context['tx'] = out
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '\n:|\x03':
        active1 = False
        out = Miss
    if active1:
        # <Bind 'nd'>
        out, i = para_ending(stream, i, context)
        if out is not Miss:
            context['nd'] = out
        active1 = out is not Miss
    if active1:
        # <Do w.block(nd[0], indent, tx, role=nd[1])>
        out = eval(_do50, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def blocks(stream, i, context):
    # <Seq blocks>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Extent>
        starti1 = i
        # <Or>
        targets = None_fm30[None]
        if i < len(stream):
            targets = None_fm30.get(stream[i], targets)
        if targets:
            for rule in targets:
                out, new = rule(stream, i, context)
                if out is not Miss:
                    i = new
                    break
            else:
                out = Miss
        else:
            out = Miss
        if out is not Miss:
            assert isinstance(out, dict)
            out['extent'] = (starti1, i)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


def grammar(stream, i, context):
    # <Seq grammar>
    savei1 = i
    savectx1 = context
    context = context.push()
    active1 = True
    if active1:
        # <Bind 'b'>
        # <Star>
        savei2 = i
        times1 = 0
        output1 = []
        while i <= len(stream):
            previ1 = i
            # <Call blocks()>
            out, i = blocks(stream, i, context)
            if out is Miss:
                break
            if i <= previ1:
                if stream.startswith('\x03', i) or i == len(stream):
                    break
                raise Exception
            if out is not Empty:
                output1.append(out)
            times1 += 1
        if times1 >= 0:
            out = output1
        else:
            out = Miss
            i = savei2
        if out is not Miss:
            context['b'] = out
        active1 = out is not Miss
    if active1:
        out, i = ws(stream, i, context)
        active1 = out is not Miss
    if active1 and i < len(stream) and stream[i] not in '\x03':
        active1 = False
        out = Miss
    if active1:
        out, i = streamend(stream, i, context)
        active1 = out is not Miss
    if active1:
        # <Do [blk for blk in b if blk]>
        out = eval(_do51, globals(), context)
        active1 = out is not Miss
    context = savectx1
    if not active1:
        i = savei1
    return out, i


_regex1 = re.compile('[ \\t]*')
_do1 = rules.compile_expr('len(indent)')
_regex2 = re.compile('[ \\t]')
_charset1 = '\r\n'
vspace_fm1 = {
    None: (),
    '\n': (anon_among1,),
    '\r': (anon_string1, anon_among1,),
}
None_fm1 = {
    None: (hspace,),
    '\n': (hspace, vspace,),
    '\r': (hspace, vspace,),
}
_charset2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_0123456789'
_regex3 = re.compile('[A-Za-z_0-9]+')
_do2 = rules.compile_expr('None')
None_fm2 = {
    None: (anon_seq1, anon_do1,),
}
None_fm3 = {
    None: (),
    '\x03': (lineend, streamend,),
    '\n': (lineend,),
}
_do3 = rules.compile_expr('w.block("pre", indent, tx, lang=lang)')
_do4 = rules.compile_expr('len(ns) + len(space)')
_charset3 = '-*'
_do5 = rules.compile_expr('len(bs) + len(space)')
_do6 = rules.compile_expr('n[0] if n else None')
_if1 = rules.compile_expr('n')
_charset4 = '0123456789ABCDEFabcdef'
_do7 = rules.compile_expr('chr(int(x, 16))')
None_fm4 = {
    None: (any_,),
    'b': (bs, any_,),
    'f': (ff, any_,),
    'n': (lf, any_,),
    'r': (cr, any_,),
    't': (tab, any_,),
    'x': (hx, any_,),
}
_do8 = rules.compile_expr("''.join(s)")
None_fm5 = {
    None: (anon_mixed1,),
    '"': (dqstring, anon_mixed1,),
}
_do9 = rules.compile_expr('(n, ext[0] if ext else None)')
None_fm6 = {
    None: (),
    '#': (ord_start,),
    '*': (bullet_start,),
    '-': (bullet_start,),
    '/': (anon_string2,),
    ':': (itemtype,),
    '=': (anon_string3,),
    '{': (anon_string4,),
    '~': (anon_string5,),
}
break__fm1 = {
    None: (),
    '\x03': (blockbreak, streamend,),
    '\n': (blockbreak, anon_seq2,),
}
comment_fm1 = {
    None: (),
    ' ': (anon_seq3, line_comment,),
    '/': (anon_seq3, line_comment,),
    '<': (anon_seq3,),
}
_do10 = rules.compile_expr('w.span("env", [], name=n)')
_regex4 = re.compile('[A-Za-z]+')
_do11 = rules.compile_expr('util.decode_named_entity(n)')
_charset5 = '0123456789'
_do12 = rules.compile_expr('int(d)')
_charset6 = '0123456789abcdefABCDEF'
_do13 = rules.compile_expr('int(h, 16)')
charnum_fm1 = {
    None: (),
    '0': (chardec,),
    '1': (chardec,),
    '2': (chardec,),
    '3': (chardec,),
    '4': (chardec,),
    '5': (chardec,),
    '6': (chardec,),
    '7': (chardec,),
    '8': (chardec,),
    '9': (chardec,),
    'x': (charhex,),
}
_do14 = rules.compile_expr('util.unichr(num)')
None_fm7 = {
    None: (named_entity,),
    '#': (num_entity, named_entity,),
}
_do15 = rules.compile_expr('char')
None_fm8 = {
    None: (),
    ' ': (anon_string6,),
    ')': (anon_string7,),
}
None_fm9 = {
    None: (anon_seq4, anon_seq5,),
}
_do16 = rules.compile_expr('w.span("keys", None, keys=[k] + kk)')
wordstart_fm1 = {
    None: (streamstart, anon_not1,),
}
None_fm10 = {
    None: (anon_failif3,),
    '*': (anon_string8, anon_failif3,),
}
wordend_fm1 = {
    None: (anon_not2,),
    '\x03': (streamend, anon_not2,),
}
_do17 = rules.compile_expr('w.span("strong", tx)')
None_fm11 = {
    None: (anon_failif4,),
    ')': (anon_string9, anon_failif4,),
}
_do18 = rules.compile_expr('w.span("link", None, scheme="Glyph", value=v)')
_regex5 = re.compile('[-A-Za-z_0-9]+')
_do19 = rules.compile_expr('(k, v)')
_do20 = rules.compile_expr('dict(attrs)')
_do21 = rules.compile_expr('w.span("xml", \'\', tag=n, attrs=alist)')
_if2 = rules.compile_expr('n == name')
_do22 = rules.compile_expr('w.span("xml", tx, tag=n, attrs=alist)')
xml_fm1 = {
    None: (),
    '<': (anon_seq6, anon_seq7,),
}
None_fm12 = {
    None: (anon_failif5,),
    '>': (anon_string10, anon_failif5,),
}
_do23 = rules.compile_expr('w.span("var", tx)')
_regex6 = re.compile('((?P<name>[A-Z][-_.A-Za-z0-9]*):)?(?P<value>[^\\]\\n|]*)')
_do24 = rules.compile_expr('w.span("link", \'\', scheme=name, value=value)')
_do25 = rules.compile_expr('w.span("link", tx, scheme=name, value=value)')
link_fm1 = {
    None: (),
    '[': (anonlink, textlink,),
}
None_fm13 = {
    None: (anon_failif6,),
    '_': (anon_string11, anon_failif6,),
}
_regex7 = re.compile('[ \\t\\r\\n]')
None_fm14 = {
    None: (uisep, inline,),
}
_do26 = rules.compile_expr('w.span("ui", tx)')
None_fm15 = {
    None: (anon_failif7,),
    '_': (anon_string12, anon_failif7,),
}
_do27 = rules.compile_expr('w.span("em", tx)')
None_fm16 = {
    None: (anon_failif8,),
    '`': (anon_string13, anon_failif8,),
}
_do28 = rules.compile_expr('w.span("code", tx)')
spans_fm1 = {
    None: (),
    ' ': (comment,),
    '"': (typog,),
    '%': (env,),
    '&': (entity,),
    "'": (typog,),
    '(': (keys, typog,),
    '*': (strong,),
    '+': (glyph,),
    '-': (typog,),
    '.': (typog,),
    '/': (comment,),
    '<': (comment, xml, var, typog,),
    '=': (typog,),
    '[': (link,),
    '_': (ui, em,),
    '`': (code,),
    'x': (typog,),
}
inline_fm1 = {
    None: (anon_failif2,),
    ' ': (spans, anon_failif2,),
    '"': (spans, anon_failif2,),
    '%': (spans, anon_failif2,),
    '&': (spans, anon_failif2,),
    "'": (spans, anon_failif2,),
    '(': (spans, anon_failif2,),
    '*': (spans, anon_failif2,),
    '+': (spans, anon_failif2,),
    '-': (spans, anon_failif2,),
    '.': (spans, anon_failif2,),
    '/': (spans, anon_failif2,),
    '<': (spans, anon_failif2,),
    '=': (spans, anon_failif2,),
    '[': (spans, anon_failif2,),
    '_': (spans, anon_failif2,),
    '`': (spans, anon_failif2,),
    'x': (spans, anon_failif2,),
}
_do29 = rules.compile_expr('w.span("q", tx)')
_if3 = rules.compile_expr('c.isalpha()')
_do30 = rules.compile_expr('c')
_charset7 = 'Ss'
_charset8 = 'Tt'
None_fm17 = {
    None: (),
    'L': (anon_string14,),
    'N': (anon_string15,),
    'S': (anon_among2,),
    'T': (anon_among3,),
    'l': (anon_string16,),
    'n': (anon_string17,),
    's': (anon_among2,),
    't': (anon_among3,),
}
None_fm18 = {
    None: (),
    '(': (anon_seq8, anon_seq9, anon_seq10,),
}
_charset9 = ' \t\r\n-;:\'",./?'
None_fm19 = {
    None: (),
    '-': (anon_string18, anon_string19,),
}
_do31 = rules.compile_expr('u"\\u2014" if len(d) == 3 else u"\\u2013"')
None_fm20 = {
    None: (),
    '-': (anon_seq11,),
    '<': (anon_seq12, anon_seq13, anon_seq14,),
    '=': (anon_seq15,),
}
None_fm21 = {
    None: (anon_peek1,),
    '\x03': (lineend, anon_peek1,),
    '\n': (lineend, anon_peek1,),
}
_do32 = rules.compile_expr("' ' + c")
None_fm22 = {
    None: (hspace,),
    '\x03': (hspace, r.streamend,),
    '0': (digit, hspace,),
    '1': (digit, hspace,),
    '2': (digit, hspace,),
    '3': (digit, hspace,),
    '4': (digit, hspace,),
    '5': (digit, hspace,),
    '6': (digit, hspace,),
    '7': (digit, hspace,),
    '8': (digit, hspace,),
    '9': (digit, hspace,),
}
typog_fm1 = {
    None: (),
    '"': (quotes,),
    "'": (apos,),
    '(': (symbols,),
    '-': (dashes, arrows,),
    '.': (elipsis,),
    '<': (arrows,),
    '=': (arrows,),
    'x': (mult,),
}
stylespans_fm1 = {
    None: (anon_failif1,),
    ' ': (comment, anon_failif1,),
    '"': (typog, anon_failif1,),
    '%': (env, anon_failif1,),
    '&': (entity, anon_failif1,),
    "'": (typog, anon_failif1,),
    '(': (typog, anon_failif1,),
    '+': (glyph, anon_failif1,),
    '-': (typog, anon_failif1,),
    '.': (typog, anon_failif1,),
    '/': (comment, anon_failif1,),
    '<': (comment, xml, var, typog, anon_failif1,),
    '=': (typog, anon_failif1,),
    '[': (link, anon_failif1,),
    '_': (em, anon_failif1,),
    '`': (code, anon_failif1,),
    'x': (typog, anon_failif1,),
}
_do33 = rules.compile_expr('w.span("supertitle", tx)')
None_fm23 = {
    None: (anon_seq16,),
    '<': (anon_seq16, anon_string20,),
}
_do34 = rules.compile_expr('w.span("subtitle", tx)')
None_fm24 = {
    None: (),
    '\x03': (streamend,),
    '\n': (anon_string21,),
}
_do35 = rules.compile_expr('w.block("title", indent, supt + tx + subt, level=0)')
_if4 = rules.compile_expr('len(eqs) > 1')
_if5 = rules.compile_expr('eqs == eqs2')
_do36 = rules.compile_expr('tag')
None_fm25 = {
    None: (),
    '\x03': (streamend,),
    '\n': (anon_string22,),
}
_do37 = rules.compile_expr('w.block("h", indent, tx, level=len(eqs), id=tag[0] if tag else None, container=True)')
None_fm26 = {
    None: (),
    '\x03': (break_,),
    '\n': (break_,),
    '"': (anon_string23,),
}
_do38 = rules.compile_expr('w.block("summary", indent, tx)')
_do39 = rules.compile_expr('w.block("divider", indent, None)')
_do40 = rules.compile_expr('w.block("sep", indent, tx, level=len(line))')
None_fm27 = {
    None: (emptylines, anon_seq18,),
}
_if6 = rules.compile_expr('nextin < indent or nextin > indent + bwidth')
bullet_ending_fm1 = {
    None: (),
    '\x03': (streamend,),
    '\n': (anon_seq17, anon_seq19, anon_seq20,),
}
_do41 = rules.compile_expr('tx')
_do42 = rules.compile_expr("w.block('bullet', indent, tx, blevel=indent+bwidth)")
_do43 = rules.compile_expr("w.block('ord', indent, tx, blevel=indent+bwidth)")
_do44 = rules.compile_expr('w.block(it[0] or "item", indent, tx, role="item", ext=it[1])')
None_fm28 = {
    None: (),
    'N': (anon_string24,),
    'T': (anon_string25,),
    'W': (anon_string26,),
}
_if7 = rules.compile_expr('nextin > indent')
_do45 = rules.compile_expr('w.block(it.lower(), indent, tx, role="item")')
_charset10 = ':\n '
_regex8 = re.compile('[^\\n]*')
_if8 = rules.compile_expr('line.strip()')
_do46 = rules.compile_expr('line')
_do47 = rules.compile_expr('w.block("prop", indent, None, name=k, value=v + "".join(extras))')
_do48 = rules.compile_expr('w.block("pxml", indent, tx, tag=n, attrs=alist)')
None_fm29 = {
    None: (),
    '\x03': (streamend,),
    '\n': (anon_string27,),
}
_do49 = rules.compile_expr('w.block(n + "_section", indent, tx, level=1, role="section", id=n, container=True)')
para_ending_fm1 = {
    None: (),
    '\x03': (anon_seq21,),
    '\n': (anon_seq21,),
    ':': (anon_seq22,),
    '|': (anon_seq23, anon_seq24,),
}
_do50 = rules.compile_expr('w.block(nd[0], indent, tx, role=nd[1])')
None_fm30 = {
    None: (codeblock, title, heading, summary, divider, sep, bullet, ord, item, note, property, pxml, section, para,),
}
_do51 = rules.compile_expr('[blk for blk in b if blk]')

